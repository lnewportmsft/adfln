{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory Name",
			"defaultValue": "adfln"
		},
		"integrationRuntime_integrationRuntime1": {
			"type": "string",
			"metadata": "Integration Runtime Name",
			"defaultValue": "integrationRuntime1"
		},
		"integrationRuntime_integrationRuntime2": {
			"type": "string",
			"metadata": "Integration Runtime Name",
			"defaultValue": "integrationRuntime2"
		},
		"integrationRuntime_integrationRuntime3": {
			"type": "string",
			"metadata": "Integration Runtime Name",
			"defaultValue": "integrationRuntime3"
		},
		"integrationRuntime_selfhostedir": {
			"type": "string",
			"metadata": "Integration Runtime Name",
			"defaultValue": "selfhostedir"
		},
		"AmazonS3Source_secretAccessKey": {
			"type": "secureString",
			"metadata": "Secure string for 'secretAccessKey' of 'AmazonS3Source'"
		},
		"AzureBatch_accessKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accessKey' of 'AzureBatch'"
		},
		"AzureBlobSH_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobSH'"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSqlDW1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDW1'"
		},
		"AzureSqlDW2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDW2'"
		},
		"AzureSqlDWLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDWLinkedService'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureSqlDatabase2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase2'"
		},
		"AzureSqlDatabaseLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseLinkedService'"
		},
		"BaseballLS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'BaseballLS'"
		},
		"DWDimProd_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DWDimProd'"
		},
		"MyAzureBlobLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MyAzureBlobLinkedService'"
		},
		"MyDataBricksLinkedService_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'MyDataBricksLinkedService'"
		},
		"SharePointOData_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SharePointOData'"
		},
		"SqlServer1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer1'"
		},
		"adlsgen2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'adlsgen2'"
		},
		"linkedService1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'linkedService1'"
		},
		"A_G_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"A_G_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/A_G"
		},
		"Addresses_Blob_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "Address.csv"
		},
		"Addresses_Blob_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "demo"
		},
		"AzureBlob1_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"AzureBlob1_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "demo/cleanmovie"
		},
		"AzureBlob2_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "movies*.csv"
		},
		"AzureBlob2_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData"
		},
		"AzureBlobBaseballOutput_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"AzureBlobBaseballOutput_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/baseball"
		},
		"AzureBlobSH_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"AzureBlobSH_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "nyctaxi"
		},
		"AzureBlobTaxi_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "yellow_tripdata_2016-01.csv"
		},
		"AzureBlobTaxi_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "nyctaxi/2016"
		},
		"BaseballBatting_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "Batting.csv"
		},
		"BaseballBatting_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData/baseball"
		},
		"BattingSink_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"BattingSink_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/baseball"
		},
		"BlobStoreIncremental_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@CONCAT('Incremental-', pipeline().RunId, '.txt') "
		},
		"BlobStoreIncremental_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/incremental"
		},
		"CADOutput_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"CADOutput_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "demo/output/currency"
		},
		"CurrencyDatasetCAD_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "Currency_CAD.txt"
		},
		"CurrencyDatasetCAD_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "demo"
		},
		"CurrencyDatasetUSD_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "Currency_USD.txt"
		},
		"CurrencyDatasetUSD_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "demo"
		},
		"DemoSinkDataset_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"DemoSinkDataset_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output"
		},
		"DestinationDataset_5ra_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"DestinationDataset_5ra_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "somecontainer/markfolder"
		},
		"DestinationDataset_ael_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"DestinationDataset_ael_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "raw"
		},
		"DestinationDataset_cce_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"DestinationDataset_cce_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/json"
		},
		"DestinationDataset_d2r_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "myout.parquet"
		},
		"DestinationDataset_d2r_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/parquet"
		},
		"DestinationDataset_dia_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "moviesout.csv"
		},
		"DestinationDataset_dia_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@concat('demo/movie_sink/', formatDateTime(trigger().startTime, 'yyyy'), '/', formatDateTime(trigger().startTime, 'MM'), '/', formatDateTime(trigger().startTime, 'dd'))"
		},
		"DestinationDataset_e4g_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"DestinationDataset_e4g_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "copyfromsql"
		},
		"DestinationDataset_hii_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "_committed_2034928433163805213"
		},
		"DestinationDataset_hii_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/sample"
		},
		"DestinationDataset_xps_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"DestinationDataset_xps_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "copyfromsql2"
		},
		"DestinationDataset_y4j_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().cw_fileName"
		},
		"DestinationDataset_y4j_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@concat('raw/', formatDateTime(trigger().startTime, 'yyyy'), '/', formatDateTime(trigger().startTime, 'MM'), '/', formatDateTime(trigger().startTime, 'dd'))"
		},
		"H_P_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"H_P_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/H_P"
		},
		"MoviesDBDataset_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "moviesDB.csv"
		},
		"MoviesDBDataset_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "demo"
		},
		"PlayersBlob_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "People.csv"
		},
		"PlayersBlob_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData/baseball"
		},
		"Product_Blob_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "Product2.csv"
		},
		"Product_Blob_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData/AW"
		},
		"Q_Z_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"Q_Z_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/Q_Z"
		},
		"SinkDataset_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@CONCAT('Incremental-', pipeline().RunId, '.txt')"
		},
		"SinkDataset_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "adftutorial/incrementalcopy"
		},
		"SourceDataset_cce_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "customers.json"
		},
		"SourceDataset_cce_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData"
		},
		"SourceDataset_d2r_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "Batting.csv"
		},
		"SourceDataset_d2r_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData/baseball"
		},
		"SourceDataset_dia_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "movies.csv"
		},
		"SourceDataset_dia_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "demo"
		},
		"SourceDataset_hii_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "Batting.csv"
		},
		"SourceDataset_hii_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData/baseball"
		},
		"SourceDataset_unp_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "SupplyChain_XA_Files.csv"
		},
		"SourceDataset_unp_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "raw"
		},
		"TaxiDemoDayStatsSink_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"TaxiDemoDayStatsSink_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "demo/day_stats"
		},
		"TaxiDemoTotalByPaymentType_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"TaxiDemoTotalByPaymentType_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "demo/total_by_paymenttype"
		},
		"TaxiDemoVendorStatsSink_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"TaxiDemoVendorStatsSink_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "demo/vendor_stats"
		},
		"USDOutput_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"USDOutput_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "demo/output/currency"
		},
		"adfdropoff_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"adfdropoff_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "adfdropoff"
		},
		"adfpickup_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "*.jpg"
		},
		"blob_params_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "params-red.csv"
		},
		"blob_params_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData"
		},
		"driftout_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"driftout_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/SchemaDriftOut"
		},
		"jsonblob_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "zips.json"
		},
		"jsonblob_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData"
		},
		"locationMap_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "locationMap.csv"
		},
		"locationMap_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData/Soccer"
		},
		"movie_dataflow_sink_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"movie_dataflow_sink_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "demo/movie_sink"
		},
		"movie_dataflow_source_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "movies.csv"
		},
		"movie_dataflow_source_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "demo"
		},
		"movies2_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "movies.csv"
		},
		"movies2_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData"
		},
		"others_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"others_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/output/others"
		},
		"salesdrift_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"salesdrift_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData/SchemaDrift"
		},
		"soccer_events_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "events.csv"
		},
		"soccer_events_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer/SampleData/Soccer"
		},
		"taxi_trip_data_input_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "trip_data_1.csv"
		},
		"taxi_trip_data_input_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "demo"
		},
		"taxi_trip_fare_input_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "trip_fare_1.csv"
		},
		"taxi_trip_fare_input_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "demo"
		},
		"AmazonS3Source_properties_typeProperties_accessKeyId": {
			"type": "string",
			"defaultValue": "AKIAJHJOC6ITSHA22RGQ"
		},
		"AzureBatch_properties_typeProperties_accountName": {
			"type": "string",
			"defaultValue": "lnbatch"
		},
		"AzureBatch_properties_typeProperties_batchUri": {
			"type": "string",
			"defaultValue": "https://lnbatch.eastus2.batch.azure.com"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://lgnstorage.dfs.core.windows.net"
		},
		"AzureDataLakeStore1_properties_typeProperties_dataLakeStoreUri": {
			"type": "string",
			"defaultValue": "https://makadls001.azuredatalakestore.net/webhdfs/v1"
		},
		"AzureDataLakeStore1_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
		},
		"AzureDataLakeStore1_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "1e42591f-1f0c-4c5a-b7f2-a268f6105ec5"
		},
		"AzureDataLakeStore1_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "makbricksadf"
		},
		"LNAKV_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://lnakv.vault.azure.net/"
		},
		"SharePointOData_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://<mysite>.sharepoint.com/<mysubsite>/_vti_bin/client.svc/web/lists"
		},
		"SharePointOData_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "lnewport"
		},
		"adlsgen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://lgnstorage2.dfs.core.windows.net"
		},
		"linkedService1_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": ".\\adfpickup"
		},
		"integrationRuntime2_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint": {
			"type": "string",
			"defaultValue": "makssis002.database.windows.net"
		},
		"integrationRuntime2_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName": {
			"type": "string",
			"defaultValue": "kromerm"
		},
		"integrationRuntime2_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword": {
			"type": "secureString"
		},
		"dfparameters_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "dfparameters.txt"
		},
		"dfparameters_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "mycontainer"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/BaseballPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Baseball 1 Norm Batting Stats",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Baseball 1 Norm Batting Stats",
								"type": "DataFlowReference",
								"datasetParameters": {
									"sourceBatting": {},
									"sourcePlayer": {},
									"sink1": {}
								}
							},
							"linkedService": {
								"referenceName": "MyDataBricksLinkedService",
								"type": "LinkedServiceReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureBlobStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "mycontainer/staging"
							}
						}
					}
				],
				"folder": {
					"name": "Baseball"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Baseball 1 Norm Batting Stats')]",
				"[concat(variables('factoryId'), '/linkedServices/MyDataBricksLinkedService')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BaseballPipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Baseball 1 Norm Batting Stats",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Baseball 1 Norm Batting Stats",
								"type": "DataFlowReference",
								"datasetParameters": {
									"sourceBatting": {},
									"sourcePlayer": {},
									"sink1": {}
								}
							},
							"linkedService": {
								"referenceName": "MyDataBricksLinkedService",
								"type": "LinkedServiceReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureBlobStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "mycontainer/staging"
							}
						}
					}
				],
				"folder": {
					"name": "Baseball"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Baseball 1 Norm Batting Stats')]",
				"[concat(variables('factoryId'), '/linkedServices/MyDataBricksLinkedService')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Controller Daily Analytics Loader')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Incremental Data Lake Loading",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "My Incremental Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Daily Sales Summaries and Cals",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Incremental Data Lake Loading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Currency Converter",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Data Stores",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Daily Sales Summaries and Cals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ETL Final Stage",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"issuccess": "1"
							}
						}
					}
				],
				"folder": {
					"name": "PipelineController"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/My Incremental Pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/Currency Converter')]",
				"[concat(variables('factoryId'), '/pipelines/ETL Final Stage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyMultiTableJSONArray')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEachTableInArray",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyFromSQLDBtoBlob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@{item().source.tableName}"
										},
										{
											"name": "Destination",
											"value": "raw/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlSource"
										},
										"sink": {
											"type": "BlobSink"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_y4j",
											"type": "DatasetReference",
											"parameters": {
												"cw_tableName": "@item().source.tableName"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_y4j",
											"type": "DatasetReference",
											"parameters": {
												"cw_fileName": "@item().destination.fileName"
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"tableName": "[concat('[', 'dbo].[mktzips]')]"
								},
								"destination": {
									"fileName": "[concat('[', 'dbo].[mktzips].txt')]"
								}
							},
							{
								"source": {
									"tableName": "[concat('[', 'dbo].[zcshapes]')]"
								},
								"destination": {
									"fileName": "[concat('[', 'dbo].[zcshapes].txt')]"
								}
							}
						]
					}
				},
				"folder": {
					"name": "Copy Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_y4j')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_y4j')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyOnPremJpgToBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy OnPrem Images",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "FileSystemSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "adfpickup",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "adfdropoff",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "Copy Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/adfpickup')]",
				"[concat(variables('factoryId'), '/datasets/adfdropoff')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_cce')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_cce",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "mycontainer/SampleData/customers.json"
							},
							{
								"name": "Destination",
								"value": "mycontainer/output/json/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_cce",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_cce",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "Copy"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_cce')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_cce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyTaxi')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "MergeFiles"
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "AzureBlobSH",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureBlobTaxi",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "Copy Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBlobSH')]",
				"[concat(variables('factoryId'), '/datasets/AzureBlobTaxi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Currency Converter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Convert Currencies",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Currency Converter",
								"type": "DataFlowReference",
								"datasetParameters": {
									"USDCurrency": {},
									"CADSource": {},
									"USDSink": {},
									"CADSink": {}
								}
							},
							"linkedService": {
								"referenceName": "MyDataBricksLinkedService",
								"type": "LinkedServiceReference"
							},
							"staging": {}
						}
					}
				],
				"folder": {
					"name": "Data Flow Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Currency Converter')]",
				"[concat(variables('factoryId'), '/linkedServices/MyDataBricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ETL Final Stage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Dsitribute Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": false
							},
							"sink": {
								"type": "SqlDWSink",
								"allowPolyBase": false,
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "movie_dataflow_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlDWTable2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Refresh Cubes",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Dsitribute Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "http://www.yahoo.com",
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "Send Email Notices",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Dsitribute Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "http://www.yahoo.com",
							"method": "GET",
							"headers": {}
						}
					}
				],
				"parameters": {
					"issuccess": {
						"type": "Int",
						"defaultValue": 1
					}
				},
				"folder": {
					"name": "PipelineController"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movie_dataflow_source')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDWTable2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetTableListAndTriggerCopyData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LookupTableList",
						"description": "Retrieve the table list from Azure SQL database",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT TABLE_SCHEMA, TABLE_NAME FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' and TABLE_SCHEMA = 'SalesLT' and TABLE_NAME <> 'ProductModel'"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TriggerCopy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LookupTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "IterateAndCopySQLTables",
								"type": "PipelineReference"
							},
							"parameters": {
								"tableList": {
									"value": "@activity('LookupTableList').output.value",
									"type": "Expression"
								}
							}
						}
					}
				],
				"folder": {
					"name": "Copy Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabaseDataset')]",
				"[concat(variables('factoryId'), '/pipelines/IterateAndCopySQLTables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalCopyPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource"
							},
							"dataset": {
								"referenceName": "WatermarkDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "LookupNewWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "select MAX(LastModifytime) as NewWatermarkvalue from data_source_table"
							},
							"dataset": {
								"referenceName": "SourceDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "IncrementalCopyActivity",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupNewWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select * from data_source_table where LastModifytime > '@{activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue}' and LastModifytime <= '@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "SourceDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "StoredProceduretoWriteWatermarkActivity",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "IncrementalCopyActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[concat('[', 'dbo].[sp_write_watermark]')]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('LookupOldWaterMarkActivity').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseLinkedService",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "Copy Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WatermarkDataset')]",
				"[concat(variables('factoryId'), '/datasets/SourceDataset')]",
				"[concat(variables('factoryId'), '/datasets/SinkDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IterateAndCopySQLTables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "IterateSQLTables",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.tableList",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy Data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM [@{item().TABLE_SCHEMA}].[@{item().TABLE_NAME}]",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "SqlDWSink",
											"allowPolyBase": true,
											"writeBatchSize": 10000,
											"preCopyScript": {
												"value": "TRUNCATE TABLE [@{item().TABLE_SCHEMA}].[@{item().TABLE_NAME}]",
												"type": "Expression"
											},
											"polyBaseSettings": {
												"rejectValue": 0,
												"rejectType": "value",
												"useTypeDefault": false
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "MyAzureBlobLinkedService",
												"type": "LinkedServiceReference"
											}
										},
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "AzureSqlDatabaseDataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlDWDataset",
											"type": "DatasetReference",
											"parameters": {
												"DWTableName": {
													"value": "[concat('[', '@{item().TABLE_SCHEMA}].[@{item().TABLE_NAME}]')]",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"tableList": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Copy Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabaseDataset')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDWDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MovieDemoPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteMovieDemoDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MovieDemo",
								"type": "DataFlowReference",
								"datasetParameters": {
									"Movies": {},
									"Output": {}
								}
							},
							"linkedService": {
								"referenceName": "MyDataBricksLinkedService",
								"type": "LinkedServiceReference"
							},
							"staging": {}
						}
					}
				],
				"folder": {
					"name": "Data Flow Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MovieDemo')]",
				"[concat(variables('factoryId'), '/linkedServices/MyDataBricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/My Incremental Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Lookup_LastVersion",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource"
							},
							"dataset": {
								"referenceName": "AzureSQLIncremental_Changes",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Lookup_CurrentVersion",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT CHANGE_TRACKING_CURRENT_VERSION() as CurrentChangeTrackingVersion"
							},
							"dataset": {
								"referenceName": "AzureSqlIncremental_Data",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Incrememental Copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_LastVersion",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Lookup_CurrentVersion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select data_source_table.PersonID,data_source_table.Name,data_source_table.Age, CT.SYS_CHANGE_VERSION, SYS_CHANGE_OPERATION from data_source_table RIGHT OUTER JOIN CHANGETABLE(CHANGES data_source_table, @{activity('Lookup_LastVersion').output.firstRow.SYS_CHANGE_VERSION}) as CT on data_source_table.PersonID = CT.PersonID where CT.SYS_CHANGE_VERSION <= @{activity('Lookup_CurrentVersion').output.firstRow.CurrentChangeTrackingVersion}",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "AzureSqlIncremental_Data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "BlobStoreIncremental",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Change Tracking",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Incrememental Copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[concat('[', 'dbo].[Update_ChangeTracking_Version]')]",
							"storedProcedureParameters": {
								"CurrentTrackingVersion": {
									"value": {
										"value": "@{activity('Lookup_CurrentVersion').output.firstRow.CurrentChangeTrackingVersion}",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"TableName": {
									"value": {
										"value": "@{activity('Lookup_LastVersion').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "Incremental"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLIncremental_Changes')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlIncremental_Data')]",
				"[concat(variables('factoryId'), '/datasets/BlobStoreIncremental')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipe With Vars')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set Variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "myarray",
							"value": [
								"abc"
							]
						}
					},
					{
						"name": "Append Variable1",
						"type": "AppendVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "myarray",
							"value": "abc"
						}
					}
				],
				"variables": {
					"myarray": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "PipelineController"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RegExDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "regexflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "regexflow",
								"type": "DataFlowReference",
								"datasetParameters": {
									"IncomingAddresses": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {}
								}
							},
							"linkedService": {
								"referenceName": "MyDataBricksLinkedService",
								"type": "LinkedServiceReference"
							},
							"staging": {}
						}
					}
				],
				"folder": {
					"name": "Data Flow Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/regexflow')]",
				"[concat(variables('factoryId'), '/linkedServices/MyDataBricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunExeInBatch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "HelloWorld",
						"type": "Custom",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"command": "helloworld.exe",
							"resourceLinkedService": {
								"referenceName": "MyAzureBlobLinkedService",
								"type": "LinkedServiceReference"
							},
							"folderPath": "customapps/helloworld",
							"referenceObjects": {
								"linkedServices": [],
								"datasets": []
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureBatch",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "Misc"
				},
				"annotations": [
					"BatchExecute"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBatch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "SCDType2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCDType2",
								"type": "DataFlowReference",
								"datasetParameters": {
									"SQLProducts": {},
									"DimProd": {},
									"sink1": {}
								}
							},
							"linkedService": {
								"referenceName": "MyDataBricksLinkedService",
								"type": "LinkedServiceReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureBlobStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "mycontainer/staging"
							}
						}
					}
				],
				"folder": {
					"name": "Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCDType2')]",
				"[concat(variables('factoryId'), '/linkedServices/MyDataBricksLinkedService')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Schema Drift Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "SchemaDrift",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SchemaDrift",
								"type": "DataFlowReference",
								"datasetParameters": {
									"SalesSource1": {},
									"sink1": {}
								}
							},
							"linkedService": {
								"referenceName": "MyDataBricksLinkedService",
								"type": "LinkedServiceReference"
							},
							"staging": {}
						}
					}
				],
				"folder": {
					"name": "Drifts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SchemaDrift')]",
				"[concat(variables('factoryId'), '/linkedServices/MyDataBricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "TaxiDemoDataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TaxiDemo",
								"type": "DataFlowReference",
								"datasetParameters": {
									"TripData": {},
									"TripFare": {},
									"VendorStatsSink": {},
									"DayStatsSink": {},
									"TotalPaymentByPaymentType": {}
								}
							},
							"linkedService": {
								"referenceName": "MyDataBricksLinkedService",
								"type": "LinkedServiceReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureBlobStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "mycontainter/staging"
							}
						}
					}
				],
				"folder": {
					"name": "Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TaxiDemo')]",
				"[concat(variables('factoryId'), '/linkedServices/MyDataBricksLinkedService')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemoPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "TaxiDemo",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TaxiDemo",
								"type": "DataFlowReference",
								"datasetParameters": {
									"TripData": {},
									"TripFare": {},
									"VendorStatsSink": {},
									"DayStatsSink": {},
									"TotalPaymentByPaymentType": {}
								}
							},
							"linkedService": {
								"referenceName": "MyDataBricksLinkedService",
								"type": "LinkedServiceReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "MyAzureBlobLinkedService",
									"type": "LinkedServiceReference"
								},
								"folderPath": "demo/staging"
							}
						}
					}
				],
				"folder": {
					"name": "Data Flow Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TaxiDemo')]",
				"[concat(variables('factoryId'), '/linkedServices/MyDataBricksLinkedService')]",
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/invokedPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "CopyBlobtoBlob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "AzureBlob1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CADOutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"parameters": {
					"sourceBlobContainer": {
						"type": "String"
					},
					"sinkBlobContainer": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PipelineController"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBlob1')]",
				"[concat(variables('factoryId'), '/datasets/CADOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/masterPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MyExecutePipelineActivity",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "invokedPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"sourceBlobContainer": {
									"value": "@pipeline().parameters.masterSourceBlobContainer",
									"type": "Expression"
								},
								"sinkBlobCountainer": {
									"value": "@pipeline().parameters.masterSinkBlobContainer",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"masterSourceBlobContainer": {
						"type": "String"
					},
					"masterSinkBlobContainer": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PipelineController"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/invokedPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCDType2",
								"type": "DataFlowReference",
								"datasetParameters": {
									"SQLProducts": {},
									"DimProd": {},
									"sink1": {}
								}
							},
							"linkedService": {
								"referenceName": "MyDataBricksLinkedService",
								"type": "LinkedServiceReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureBlobStorage1",
									"type": "LinkedServiceReference"
								},
								"folderPath": "mycontainer/staging"
							}
						}
					}
				],
				"folder": {
					"name": "Misc"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCDType2')]",
				"[concat(variables('factoryId'), '/linkedServices/MyDataBricksLinkedService')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Baseball 2 Adv Stats",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Baseball 2 Adv Stats",
								"type": "DataFlowReference",
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"linkedService": {
								"referenceName": "MyDataBricksLinkedService",
								"type": "LinkedServiceReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "MyAzureBlobLinkedService",
									"type": "LinkedServiceReference"
								},
								"folderPath": "mycontainer/staging"
							}
						}
					}
				],
				"folder": {
					"name": "Misc"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Baseball 2 Adv Stats')]",
				"[concat(variables('factoryId'), '/linkedServices/MyDataBricksLinkedService')]",
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Currency Converter",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Currency Converter",
								"type": "DataFlowReference",
								"datasetParameters": {
									"USDCurrency": {},
									"CADSource": {},
									"USDSink": {},
									"CADSink": {}
								}
							},
							"linkedService": {
								"referenceName": "MyDataBricksLinkedService",
								"type": "LinkedServiceReference"
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureBlobStorage1",
									"type": "LinkedServiceReference"
								}
							}
						}
					}
				],
				"folder": {
					"name": "Misc"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Currency Converter')]",
				"[concat(variables('factoryId'), '/linkedServices/MyDataBricksLinkedService')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline5')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"activities": [
					{
						"name": "dummypipe",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"folder": {
					"name": "Misc"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADW_DimProduct')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"structure": [
					{
						"name": "ProductKey",
						"type": "Int32"
					},
					{
						"name": "ProductAlternateKey",
						"type": "String"
					},
					{
						"name": "ProductSubcategoryKey",
						"type": "Int32"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "EnglishProductName",
						"type": "String"
					},
					{
						"name": "SpanishProductName",
						"type": "String"
					},
					{
						"name": "FrenchProductName",
						"type": "String"
					},
					{
						"name": "StandardCost",
						"type": "Decimal"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "Boolean"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "SafetyStockLevel",
						"type": "Int16"
					},
					{
						"name": "ReorderPoint",
						"type": "Int16"
					},
					{
						"name": "ListPrice",
						"type": "Decimal"
					},
					{
						"name": "Size",
						"type": "String"
					},
					{
						"name": "SizeRange",
						"type": "String"
					},
					{
						"name": "Weight",
						"type": "Double"
					},
					{
						"name": "DaysToManufacture",
						"type": "Int32"
					},
					{
						"name": "ProductLine",
						"type": "String"
					},
					{
						"name": "DealerPrice",
						"type": "Decimal"
					},
					{
						"name": "Class",
						"type": "String"
					},
					{
						"name": "Style",
						"type": "String"
					},
					{
						"name": "ModelName",
						"type": "String"
					},
					{
						"name": "EnglishDescription",
						"type": "String"
					},
					{
						"name": "FrenchDescription",
						"type": "String"
					},
					{
						"name": "ChineseDescription",
						"type": "String"
					},
					{
						"name": "ArabicDescription",
						"type": "String"
					},
					{
						"name": "HebrewDescription",
						"type": "String"
					},
					{
						"name": "ThaiDescription",
						"type": "String"
					},
					{
						"name": "GermanDescription",
						"type": "String"
					},
					{
						"name": "JapaneseDescription",
						"type": "String"
					},
					{
						"name": "TurkishDescription",
						"type": "String"
					},
					{
						"name": "StartDate",
						"type": "DateTime"
					},
					{
						"name": "EndDate",
						"type": "DateTime"
					},
					{
						"name": "Status",
						"type": "String"
					}
				],
				"typeProperties": {
					"tableName": "DimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADW_FactSales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"structure": [
					{
						"name": "OrderTotal",
						"type": "Decimal"
					},
					{
						"name": "RevisionNumber",
						"type": "String"
					},
					{
						"name": "OrderDate",
						"type": "DateTime"
					},
					{
						"name": "DueDate",
						"type": "DateTime"
					},
					{
						"name": "ShipDate",
						"type": "DateTime"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "OnlineOrderFlag",
						"type": "Boolean"
					},
					{
						"name": "SalesOrderNumber",
						"type": "String"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "String"
					},
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "Int32"
					},
					{
						"name": "ShipToAddressID",
						"type": "Int32"
					},
					{
						"name": "BillToAddressID",
						"type": "Int32"
					},
					{
						"name": "ShipMethod",
						"type": "String"
					},
					{
						"name": "CreditCardApprovalCode",
						"type": "String"
					},
					{
						"name": "SubTotal",
						"type": "Decimal"
					},
					{
						"name": "TaxAmt",
						"type": "Decimal"
					},
					{
						"name": "Freight",
						"type": "Decimal"
					},
					{
						"name": "TotalDue",
						"type": "Decimal"
					},
					{
						"name": "Comment",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "String"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "FactSales_makromer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/A_G')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('A_G_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('A_G_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Addresses_Blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "AddressID",
						"type": "String"
					},
					{
						"name": "Address1",
						"type": "String"
					},
					{
						"name": "Address2",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "Prop_4",
						"type": "String"
					},
					{
						"name": "Prop_5",
						"type": "String"
					},
					{
						"name": "Prop_6",
						"type": "String"
					},
					{
						"name": "Prop_7",
						"type": "String"
					},
					{
						"name": "Prop_8",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": "\t",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('Addresses_Blob_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('Addresses_Blob_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AmazonS3Object')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AmazonS3Source",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AmazonS3Object",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"bucketName": ""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AmazonS3Source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlob1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('AzureBlob1_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureBlob1_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlob2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "Prop_0",
						"type": "String"
					},
					{
						"name": "Prop_1",
						"type": "String"
					},
					{
						"name": "Prop_2",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('AzureBlob2_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureBlob2_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobBaseballOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('AzureBlobBaseballOutput_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureBlobBaseballOutput_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobSH')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobSH",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('AzureBlobSH_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureBlobSH_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobSH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobTaxi')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "Prop_0",
						"type": "String"
					},
					{
						"name": "Prop_1",
						"type": "String"
					},
					{
						"name": "Prop_2",
						"type": "String"
					},
					{
						"name": "Prop_3",
						"type": "String"
					},
					{
						"name": "Prop_4",
						"type": "String"
					},
					{
						"name": "Prop_5",
						"type": "String"
					},
					{
						"name": "Prop_6",
						"type": "String"
					},
					{
						"name": "Prop_7",
						"type": "String"
					},
					{
						"name": "Prop_8",
						"type": "String"
					},
					{
						"name": "Prop_9",
						"type": "String"
					},
					{
						"name": "Prop_10",
						"type": "String"
					},
					{
						"name": "Prop_11",
						"type": "String"
					},
					{
						"name": "Prop_12",
						"type": "String"
					},
					{
						"name": "Prop_13",
						"type": "String"
					},
					{
						"name": "Prop_14",
						"type": "String"
					},
					{
						"name": "Prop_15",
						"type": "String"
					},
					{
						"name": "Prop_16",
						"type": "String"
					},
					{
						"name": "Prop_17",
						"type": "String"
					},
					{
						"name": "Prop_18",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('AzureBlobTaxi_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureBlobTaxi_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLIncremental_Changes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Incremental"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "TableName",
						"type": "String"
					},
					{
						"name": "SYS_CHANGE_VERSION",
						"type": "Int64"
					}
				],
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[table_store_ChangeTracking_version]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDWDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDWLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DWTableName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"typeProperties": {
					"tableName": {
						"value": "@dataset().DWTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDWLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDWTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"typeProperties": {
					"tableName": "templatedemodata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDWTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"typeProperties": {
					"tableName": "batting"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDWTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"structure": [
					{
						"name": "digit",
						"type": "Int32"
					}
				],
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[Cardinals]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDWTable4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"structure": [
					{
						"name": "yearID",
						"type": "Int32"
					},
					{
						"name": "BA",
						"type": "Double"
					},
					{
						"name": "OBP",
						"type": "Double"
					},
					{
						"name": "SLG",
						"type": "Double"
					},
					{
						"name": "playerID",
						"type": "String"
					},
					{
						"name": "birthYear",
						"type": "String"
					},
					{
						"name": "birthMonth",
						"type": "String"
					},
					{
						"name": "birthDay",
						"type": "String"
					},
					{
						"name": "birthCountry",
						"type": "String"
					},
					{
						"name": "birthState",
						"type": "String"
					},
					{
						"name": "birthCity",
						"type": "String"
					},
					{
						"name": "deathYear",
						"type": "String"
					},
					{
						"name": "deathMonth",
						"type": "String"
					},
					{
						"name": "deathDay",
						"type": "String"
					},
					{
						"name": "deathCountry",
						"type": "String"
					},
					{
						"name": "deathState",
						"type": "String"
					},
					{
						"name": "deathCity",
						"type": "String"
					},
					{
						"name": "nameFirst",
						"type": "String"
					},
					{
						"name": "nameLast",
						"type": "String"
					},
					{
						"name": "nameGiven",
						"type": "String"
					},
					{
						"name": "weight",
						"type": "String"
					},
					{
						"name": "height",
						"type": "String"
					},
					{
						"name": "bats",
						"type": "String"
					},
					{
						"name": "throws",
						"type": "String"
					},
					{
						"name": "debut",
						"type": "String"
					},
					{
						"name": "finalGame",
						"type": "String"
					},
					{
						"name": "retroID",
						"type": "String"
					},
					{
						"name": "bbrefID",
						"type": "String"
					},
					{
						"name": "stint",
						"type": "String"
					},
					{
						"name": "teamID",
						"type": "String"
					},
					{
						"name": "lgID",
						"type": "String"
					},
					{
						"name": "G",
						"type": "Int32"
					},
					{
						"name": "AB",
						"type": "Int32"
					},
					{
						"name": "R",
						"type": "Int32"
					},
					{
						"name": "H",
						"type": "Int32"
					},
					{
						"name": "H2B",
						"type": "Int32"
					},
					{
						"name": "H3B",
						"type": "Int32"
					},
					{
						"name": "HR",
						"type": "Int32"
					},
					{
						"name": "RBI",
						"type": "Int32"
					},
					{
						"name": "SB",
						"type": "Int32"
					},
					{
						"name": "CS",
						"type": "Int32"
					},
					{
						"name": "BB",
						"type": "Int32"
					},
					{
						"name": "SO",
						"type": "Int32"
					},
					{
						"name": "IBB",
						"type": "Int32"
					},
					{
						"name": "HBP",
						"type": "Int32"
					},
					{
						"name": "SH",
						"type": "Int32"
					},
					{
						"name": "SF",
						"type": "Int32"
					},
					{
						"name": "GIDP",
						"type": "Int32"
					}
				],
				"typeProperties": {
					"tableName": "BattingAvgTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "dummyName"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlIncremental_Data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Incremental"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "PersonID",
						"type": "Int32"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "Int32"
					}
				],
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[data_source_table]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "movieId",
						"type": "Int32"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "junk",
						"type": "String"
					}
				],
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[Movies2]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BaseballADW')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"typeProperties": {
					"tableName": "BaseballBatting"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BaseballBatting')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "playerID",
						"type": "String"
					},
					{
						"name": "yearID",
						"type": "String"
					},
					{
						"name": "stint",
						"type": "String"
					},
					{
						"name": "teamID",
						"type": "String"
					},
					{
						"name": "lgID",
						"type": "String"
					},
					{
						"name": "G",
						"type": "String"
					},
					{
						"name": "AB",
						"type": "String"
					},
					{
						"name": "R",
						"type": "String"
					},
					{
						"name": "H",
						"type": "String"
					},
					{
						"name": "H2B",
						"type": "String"
					},
					{
						"name": "H3B",
						"type": "String"
					},
					{
						"name": "HR",
						"type": "String"
					},
					{
						"name": "RBI",
						"type": "String"
					},
					{
						"name": "SB",
						"type": "String"
					},
					{
						"name": "CS",
						"type": "String"
					},
					{
						"name": "BB",
						"type": "String"
					},
					{
						"name": "SO",
						"type": "String"
					},
					{
						"name": "IBB",
						"type": "String"
					},
					{
						"name": "HBP",
						"type": "String"
					},
					{
						"name": "SH",
						"type": "String"
					},
					{
						"name": "SF",
						"type": "String"
					},
					{
						"name": "GIDP",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('BaseballBatting_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('BaseballBatting_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BattingAvg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"structure": [
					{
						"name": "yearID",
						"type": "Int32"
					},
					{
						"name": "BA",
						"type": "Double"
					},
					{
						"name": "OBP",
						"type": "Double"
					},
					{
						"name": "SLG",
						"type": "Double"
					},
					{
						"name": "playerID",
						"type": "String"
					},
					{
						"name": "birthYear",
						"type": "String"
					},
					{
						"name": "birthMonth",
						"type": "String"
					},
					{
						"name": "birthDay",
						"type": "String"
					},
					{
						"name": "birthCountry",
						"type": "String"
					},
					{
						"name": "birthState",
						"type": "String"
					},
					{
						"name": "birthCity",
						"type": "String"
					},
					{
						"name": "deathYear",
						"type": "String"
					},
					{
						"name": "deathMonth",
						"type": "String"
					},
					{
						"name": "deathDay",
						"type": "String"
					},
					{
						"name": "deathCountry",
						"type": "String"
					},
					{
						"name": "deathState",
						"type": "String"
					},
					{
						"name": "deathCity",
						"type": "String"
					},
					{
						"name": "nameFirst",
						"type": "String"
					},
					{
						"name": "nameLast",
						"type": "String"
					},
					{
						"name": "nameGiven",
						"type": "String"
					},
					{
						"name": "weight",
						"type": "String"
					},
					{
						"name": "height",
						"type": "String"
					},
					{
						"name": "bats",
						"type": "String"
					},
					{
						"name": "throws",
						"type": "String"
					},
					{
						"name": "debut",
						"type": "String"
					},
					{
						"name": "finalGame",
						"type": "String"
					},
					{
						"name": "retroID",
						"type": "String"
					},
					{
						"name": "bbrefID",
						"type": "String"
					},
					{
						"name": "stint",
						"type": "String"
					},
					{
						"name": "teamID",
						"type": "String"
					},
					{
						"name": "lgID",
						"type": "String"
					},
					{
						"name": "G",
						"type": "Int32"
					},
					{
						"name": "AB",
						"type": "Int32"
					},
					{
						"name": "R",
						"type": "Int32"
					},
					{
						"name": "H",
						"type": "Int32"
					},
					{
						"name": "H2B",
						"type": "Int32"
					},
					{
						"name": "H3B",
						"type": "Int32"
					},
					{
						"name": "HR",
						"type": "Int32"
					},
					{
						"name": "RBI",
						"type": "Int32"
					},
					{
						"name": "SB",
						"type": "Int32"
					},
					{
						"name": "CS",
						"type": "Int32"
					},
					{
						"name": "BB",
						"type": "Int32"
					},
					{
						"name": "SO",
						"type": "Int32"
					},
					{
						"name": "IBB",
						"type": "Int32"
					},
					{
						"name": "HBP",
						"type": "Int32"
					},
					{
						"name": "SH",
						"type": "Int32"
					},
					{
						"name": "SF",
						"type": "Int32"
					},
					{
						"name": "GIDP",
						"type": "Int32"
					}
				],
				"typeProperties": {
					"tableName": "BattingAvgTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BattingSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('BattingSink_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('BattingSink_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobStoreIncremental')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Incremental"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": {
						"value": "[parameters('BlobStoreIncremental_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": "[parameters('BlobStoreIncremental_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CADOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('CADOutput_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('CADOutput_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CurrencyDatasetCAD')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "PreviousConversionRate",
						"type": "Int32"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "DateTime1",
						"type": "DateTime"
					},
					{
						"name": "CurrentConversionRate",
						"type": "Int32"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": "\t",
						"rowDelimiter": "",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('CurrencyDatasetCAD_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('CurrencyDatasetCAD_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CurrencyDatasetUSD')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "PreviousConversionRate",
						"type": "Int32"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "DateTime1",
						"type": "DateTime"
					},
					{
						"name": "CurrentConversionRate",
						"type": "Int32"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": "\t",
						"rowDelimiter": "",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('CurrencyDatasetUSD_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('CurrencyDatasetUSD_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWSabermetrics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"typeProperties": {
					"tableName": "Sabermetrics"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DemoSinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('DemoSinkDataset_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('DemoSinkDataset_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_5ra')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy"
				},
				"annotations": [],
				"type": "AzureBlobFSFile",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('DestinationDataset_5ra_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('DestinationDataset_5ra_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_ael')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('DestinationDataset_ael_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('DestinationDataset_ael_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_cce')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('DestinationDataset_cce_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('DestinationDataset_cce_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_d2r')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "ParquetFormat"
					},
					"fileName": "[parameters('DestinationDataset_d2r_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('DestinationDataset_d2r_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_dia')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('DestinationDataset_dia_properties_typeProperties_fileName')]",
					"folderPath": {
						"value": "[parameters('DestinationDataset_dia_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_e4g')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adlsgen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlobFSFile",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('DestinationDataset_e4g_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('DestinationDataset_e4g_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_hii')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('DestinationDataset_hii_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('DestinationDataset_hii_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_unp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "env",
						"type": "String"
					},
					{
						"name": "LibraryName",
						"type": "String"
					},
					{
						"name": "ObjectName",
						"type": "String"
					}
				],
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[xa]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_xps')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "adlsgen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlobFSFile",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('DestinationDataset_xps_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('DestinationDataset_xps_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_y4j')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "ParquetFormat"
					},
					"fileName": {
						"value": "[parameters('DestinationDataset_y4j_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('DestinationDataset_y4j_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimProd')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"structure": [
					{
						"name": "ProductKey",
						"type": "Int32"
					},
					{
						"name": "ProductAlternateKey",
						"type": "String"
					},
					{
						"name": "ProductSubcategoryKey",
						"type": "Int32"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "EnglishProductName",
						"type": "String"
					},
					{
						"name": "SpanishProductName",
						"type": "String"
					},
					{
						"name": "FrenchProductName",
						"type": "String"
					},
					{
						"name": "StandardCost",
						"type": "Decimal"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "Boolean"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "SafetyStockLevel",
						"type": "Int16"
					},
					{
						"name": "ReorderPoint",
						"type": "Int16"
					},
					{
						"name": "ListPrice",
						"type": "Decimal"
					},
					{
						"name": "Size",
						"type": "String"
					},
					{
						"name": "SizeRange",
						"type": "String"
					},
					{
						"name": "Weight",
						"type": "Double"
					},
					{
						"name": "DaysToManufacture",
						"type": "Int32"
					},
					{
						"name": "ProductLine",
						"type": "String"
					},
					{
						"name": "DealerPrice",
						"type": "Decimal"
					},
					{
						"name": "Class",
						"type": "String"
					},
					{
						"name": "Style",
						"type": "String"
					},
					{
						"name": "ModelName",
						"type": "String"
					},
					{
						"name": "EnglishDescription",
						"type": "String"
					},
					{
						"name": "FrenchDescription",
						"type": "String"
					},
					{
						"name": "ChineseDescription",
						"type": "String"
					},
					{
						"name": "ArabicDescription",
						"type": "String"
					},
					{
						"name": "HebrewDescription",
						"type": "String"
					},
					{
						"name": "ThaiDescription",
						"type": "String"
					},
					{
						"name": "GermanDescription",
						"type": "String"
					},
					{
						"name": "JapaneseDescription",
						"type": "String"
					},
					{
						"name": "TurkishDescription",
						"type": "String"
					},
					{
						"name": "StartDate",
						"type": "DateTime"
					},
					{
						"name": "EndDate",
						"type": "DateTime"
					},
					{
						"name": "Status",
						"type": "String"
					}
				],
				"typeProperties": {
					"tableName": "DimProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/H_P')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('H_P_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('H_P_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesDBDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"quoteChar": "\"",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('MoviesDBDataset_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('MoviesDBDataset_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NormBattingStats')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDW1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"structure": [
					{
						"name": "yearID",
						"type": "Int32"
					},
					{
						"name": "BA",
						"type": "Double"
					},
					{
						"name": "OBP",
						"type": "Double"
					},
					{
						"name": "SLG",
						"type": "Double"
					},
					{
						"name": "playerID",
						"type": "String"
					},
					{
						"name": "birthYear",
						"type": "String"
					},
					{
						"name": "birthMonth",
						"type": "String"
					},
					{
						"name": "birthDay",
						"type": "String"
					},
					{
						"name": "birthCountry",
						"type": "String"
					},
					{
						"name": "birthState",
						"type": "String"
					},
					{
						"name": "birthCity",
						"type": "String"
					},
					{
						"name": "deathYear",
						"type": "String"
					},
					{
						"name": "deathMonth",
						"type": "String"
					},
					{
						"name": "deathDay",
						"type": "String"
					},
					{
						"name": "deathCountry",
						"type": "String"
					},
					{
						"name": "deathState",
						"type": "String"
					},
					{
						"name": "deathCity",
						"type": "String"
					},
					{
						"name": "nameFirst",
						"type": "String"
					},
					{
						"name": "nameLast",
						"type": "String"
					},
					{
						"name": "nameGiven",
						"type": "String"
					},
					{
						"name": "weight",
						"type": "String"
					},
					{
						"name": "height",
						"type": "String"
					},
					{
						"name": "bats",
						"type": "String"
					},
					{
						"name": "throws",
						"type": "String"
					},
					{
						"name": "debut",
						"type": "String"
					},
					{
						"name": "finalGame",
						"type": "String"
					},
					{
						"name": "retroID",
						"type": "String"
					},
					{
						"name": "bbrefID",
						"type": "String"
					},
					{
						"name": "stint",
						"type": "String"
					},
					{
						"name": "teamID",
						"type": "String"
					},
					{
						"name": "lgID",
						"type": "String"
					},
					{
						"name": "G",
						"type": "Int32"
					},
					{
						"name": "AB",
						"type": "Int32"
					},
					{
						"name": "R",
						"type": "Int32"
					},
					{
						"name": "H",
						"type": "Int32"
					},
					{
						"name": "H2B",
						"type": "Int32"
					},
					{
						"name": "H3B",
						"type": "Int32"
					},
					{
						"name": "HR",
						"type": "Int32"
					},
					{
						"name": "RBI",
						"type": "Int32"
					},
					{
						"name": "SB",
						"type": "Int32"
					},
					{
						"name": "CS",
						"type": "Int32"
					},
					{
						"name": "BB",
						"type": "Int32"
					},
					{
						"name": "SO",
						"type": "Int32"
					},
					{
						"name": "IBB",
						"type": "Int32"
					},
					{
						"name": "HBP",
						"type": "Int32"
					},
					{
						"name": "SH",
						"type": "Int32"
					},
					{
						"name": "SF",
						"type": "Int32"
					},
					{
						"name": "GIDP",
						"type": "Int32"
					}
				],
				"typeProperties": {
					"tableName": "NormBattingStats"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDW1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PlayersBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BaseballLS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "playerID",
						"type": "String"
					},
					{
						"name": "birthYear",
						"type": "String"
					},
					{
						"name": "birthMonth",
						"type": "String"
					},
					{
						"name": "birthDay",
						"type": "String"
					},
					{
						"name": "birthCountry",
						"type": "String"
					},
					{
						"name": "birthState",
						"type": "String"
					},
					{
						"name": "birthCity",
						"type": "String"
					},
					{
						"name": "deathYear",
						"type": "String"
					},
					{
						"name": "deathMonth",
						"type": "String"
					},
					{
						"name": "deathDay",
						"type": "String"
					},
					{
						"name": "deathCountry",
						"type": "String"
					},
					{
						"name": "deathState",
						"type": "String"
					},
					{
						"name": "deathCity",
						"type": "String"
					},
					{
						"name": "nameFirst",
						"type": "String"
					},
					{
						"name": "nameLast",
						"type": "String"
					},
					{
						"name": "nameGiven",
						"type": "String"
					},
					{
						"name": "weight",
						"type": "String"
					},
					{
						"name": "height",
						"type": "String"
					},
					{
						"name": "bats",
						"type": "String"
					},
					{
						"name": "throws",
						"type": "String"
					},
					{
						"name": "debut",
						"type": "String"
					},
					{
						"name": "finalGame",
						"type": "String"
					},
					{
						"name": "retroID",
						"type": "String"
					},
					{
						"name": "bbrefID",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "\n",
						"nullValue": "",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('PlayersBlob_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('PlayersBlob_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BaseballLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Product_Blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "ProductNumber",
						"type": "String"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "StandardCost",
						"type": "Decimal"
					},
					{
						"name": "ListPrice",
						"type": "String"
					},
					{
						"name": "Size",
						"type": "String"
					},
					{
						"name": "Weight",
						"type": "String"
					},
					{
						"name": "ProductCategoryID",
						"type": "String"
					},
					{
						"name": "ProductModelID",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"quoteChar": "\"",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('Product_Blob_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('Product_Blob_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Q_Z')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('Q_Z_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('Q_Z_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDBBaseball1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "batting1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDBBaseball2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "BA",
						"type": "Double"
					},
					{
						"name": "OBP",
						"type": "Double"
					},
					{
						"name": "SLG",
						"type": "Double"
					},
					{
						"name": "TB",
						"type": "Int32"
					},
					{
						"name": "birthYear",
						"type": "String"
					},
					{
						"name": "birthMonth",
						"type": "String"
					},
					{
						"name": "birthDay",
						"type": "String"
					},
					{
						"name": "birthCountry",
						"type": "String"
					},
					{
						"name": "birthState",
						"type": "String"
					},
					{
						"name": "birthCity",
						"type": "String"
					},
					{
						"name": "deathYear",
						"type": "String"
					},
					{
						"name": "deathMonth",
						"type": "String"
					},
					{
						"name": "deathDay",
						"type": "String"
					},
					{
						"name": "deathCountry",
						"type": "String"
					},
					{
						"name": "deathState",
						"type": "String"
					},
					{
						"name": "deathCity",
						"type": "String"
					},
					{
						"name": "nameFirst",
						"type": "String"
					},
					{
						"name": "nameLast",
						"type": "String"
					},
					{
						"name": "nameGiven",
						"type": "String"
					},
					{
						"name": "weight",
						"type": "String"
					},
					{
						"name": "height",
						"type": "String"
					},
					{
						"name": "bats",
						"type": "String"
					},
					{
						"name": "throws",
						"type": "String"
					},
					{
						"name": "debut",
						"type": "String"
					},
					{
						"name": "finalGame",
						"type": "String"
					},
					{
						"name": "retroID",
						"type": "String"
					},
					{
						"name": "bbrefID",
						"type": "String"
					},
					{
						"name": "playerID",
						"type": "String"
					},
					{
						"name": "yearID",
						"type": "String"
					},
					{
						"name": "stint",
						"type": "String"
					},
					{
						"name": "teamID",
						"type": "String"
					},
					{
						"name": "lgID",
						"type": "String"
					},
					{
						"name": "G",
						"type": "Int32"
					},
					{
						"name": "AB",
						"type": "Int32"
					},
					{
						"name": "R",
						"type": "Int32"
					},
					{
						"name": "H",
						"type": "Int32"
					},
					{
						"name": "H2B",
						"type": "Int32"
					},
					{
						"name": "H3B",
						"type": "Int32"
					},
					{
						"name": "HR",
						"type": "Int32"
					},
					{
						"name": "RBI",
						"type": "Int32"
					},
					{
						"name": "SB",
						"type": "Int32"
					},
					{
						"name": "CS",
						"type": "Int32"
					},
					{
						"name": "BB",
						"type": "Int32"
					},
					{
						"name": "SO",
						"type": "Int32"
					},
					{
						"name": "IBB",
						"type": "Int32"
					},
					{
						"name": "HBP",
						"type": "Int32"
					},
					{
						"name": "SH",
						"type": "Int32"
					},
					{
						"name": "SF",
						"type": "Int32"
					},
					{
						"name": "GIDP",
						"type": "Int32"
					}
				],
				"typeProperties": {
					"tableName": "batting1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDB_ProdCat')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "ProductCategoryID",
						"type": "Int32"
					},
					{
						"name": "ParentProductCategoryID",
						"type": "Int32"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "Guid"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "[concat('[', 'SalesLT].[ProductCategory]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDB_Products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "ProductID",
						"type": "Int32"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "ProductNumber",
						"type": "String"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "StandardCost",
						"type": "Decimal"
					},
					{
						"name": "ListPrice",
						"type": "Decimal"
					},
					{
						"name": "Size",
						"type": "String"
					},
					{
						"name": "Weight",
						"type": "Decimal"
					},
					{
						"name": "ProductCategoryID",
						"type": "Int32"
					},
					{
						"name": "ProductModelID",
						"type": "Int32"
					},
					{
						"name": "SellStartDate",
						"type": "DateTime"
					},
					{
						"name": "SellEndDate",
						"type": "DateTime"
					},
					{
						"name": "DiscontinuedDate",
						"type": "DateTime"
					},
					{
						"name": "ThumbNailPhoto",
						"type": "Byte[]"
					},
					{
						"name": "ThumbnailPhotoFileName",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "Guid"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "[concat('[', 'SalesLT].[Product]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDB_SalesDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "SalesOrderID",
						"type": "Int32"
					},
					{
						"name": "SalesOrderDetailID",
						"type": "Int32"
					},
					{
						"name": "OrderQty",
						"type": "Int16"
					},
					{
						"name": "ProductID",
						"type": "Int32"
					},
					{
						"name": "UnitPrice",
						"type": "Decimal"
					},
					{
						"name": "UnitPriceDiscount",
						"type": "Decimal"
					},
					{
						"name": "LineTotal",
						"type": "Decimal"
					},
					{
						"name": "rowguid",
						"type": "Guid"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "[concat('[', 'SalesLT].[SalesOrderDetail]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLDB_SalesHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "SalesOrderID",
						"type": "Int32"
					},
					{
						"name": "RevisionNumber",
						"type": "Byte"
					},
					{
						"name": "OrderDate",
						"type": "DateTime"
					},
					{
						"name": "DueDate",
						"type": "DateTime"
					},
					{
						"name": "ShipDate",
						"type": "DateTime"
					},
					{
						"name": "Status",
						"type": "Byte"
					},
					{
						"name": "OnlineOrderFlag",
						"type": "Boolean"
					},
					{
						"name": "SalesOrderNumber",
						"type": "String"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "String"
					},
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "Int32"
					},
					{
						"name": "ShipToAddressID",
						"type": "Int32"
					},
					{
						"name": "BillToAddressID",
						"type": "Int32"
					},
					{
						"name": "ShipMethod",
						"type": "String"
					},
					{
						"name": "CreditCardApprovalCode",
						"type": "String"
					},
					{
						"name": "SubTotal",
						"type": "Decimal"
					},
					{
						"name": "TaxAmt",
						"type": "Decimal"
					},
					{
						"name": "Freight",
						"type": "Decimal"
					},
					{
						"name": "TotalDue",
						"type": "Decimal"
					},
					{
						"name": "Comment",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "Guid"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "[concat('[', 'SalesLT].[SalesOrderHeader]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLProducts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "ProductID",
						"type": "Int32"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "ProductNumber",
						"type": "String"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "StandardCost",
						"type": "Decimal"
					},
					{
						"name": "ListPrice",
						"type": "Decimal"
					},
					{
						"name": "Size",
						"type": "String"
					},
					{
						"name": "Weight",
						"type": "Decimal"
					}
				],
				"typeProperties": {
					"tableName": "salesprod"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_ProdCat')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"structure": [
					{
						"name": "ProductCategoryID",
						"type": "Int32"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "Guid"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "[concat('[', 'Production].[ProductCategory]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_Products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"structure": [
					{
						"name": "ProductID",
						"type": "Int32"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "ProductNumber",
						"type": "String"
					},
					{
						"name": "MakeFlag",
						"type": "Boolean"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "Boolean"
					},
					{
						"name": "Color",
						"type": "String"
					},
					{
						"name": "SafetyStockLevel",
						"type": "Int16"
					},
					{
						"name": "ReorderPoint",
						"type": "Int16"
					},
					{
						"name": "StandardCost",
						"type": "Decimal"
					},
					{
						"name": "ListPrice",
						"type": "Decimal"
					},
					{
						"name": "Size",
						"type": "String"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "String"
					},
					{
						"name": "Weight",
						"type": "Decimal"
					},
					{
						"name": "DaysToManufacture",
						"type": "Int32"
					},
					{
						"name": "ProductLine",
						"type": "String"
					},
					{
						"name": "Class",
						"type": "String"
					},
					{
						"name": "Style",
						"type": "String"
					},
					{
						"name": "ProductSubcategoryID",
						"type": "Int32"
					},
					{
						"name": "ProductModelID",
						"type": "Int32"
					},
					{
						"name": "SellStartDate",
						"type": "DateTime"
					},
					{
						"name": "SellEndDate",
						"type": "DateTime"
					},
					{
						"name": "DiscontinuedDate",
						"type": "DateTime"
					},
					{
						"name": "rowguid",
						"type": "Guid"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "[concat('[', 'Production].[Product]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_SalesDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"structure": [
					{
						"name": "SalesOrderID",
						"type": "Int32"
					},
					{
						"name": "SalesOrderDetailID",
						"type": "Int32"
					},
					{
						"name": "CarrierTrackingNumber",
						"type": "String"
					},
					{
						"name": "OrderQty",
						"type": "Int16"
					},
					{
						"name": "ProductID",
						"type": "Int32"
					},
					{
						"name": "SpecialOfferID",
						"type": "Int32"
					},
					{
						"name": "UnitPrice",
						"type": "Decimal"
					},
					{
						"name": "UnitPriceDiscount",
						"type": "Decimal"
					},
					{
						"name": "LineTotal",
						"type": "Decimal"
					},
					{
						"name": "rowguid",
						"type": "Guid"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "[concat('[', 'Sales].[SalesOrderDetail]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_SalesHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"structure": [
					{
						"name": "SalesOrderID",
						"type": "Int32"
					},
					{
						"name": "RevisionNumber",
						"type": "Byte"
					},
					{
						"name": "OrderDate",
						"type": "DateTime"
					},
					{
						"name": "DueDate",
						"type": "DateTime"
					},
					{
						"name": "ShipDate",
						"type": "DateTime"
					},
					{
						"name": "Status",
						"type": "Byte"
					},
					{
						"name": "OnlineOrderFlag",
						"type": "Boolean"
					},
					{
						"name": "SalesOrderNumber",
						"type": "String"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "String"
					},
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "Int32"
					},
					{
						"name": "SalesPersonID",
						"type": "Int32"
					},
					{
						"name": "TerritoryID",
						"type": "Int32"
					},
					{
						"name": "BillToAddressID",
						"type": "Int32"
					},
					{
						"name": "ShipToAddressID",
						"type": "Int32"
					},
					{
						"name": "ShipMethodID",
						"type": "Int32"
					},
					{
						"name": "CreditCardID",
						"type": "Int32"
					},
					{
						"name": "CreditCardApprovalCode",
						"type": "String"
					},
					{
						"name": "CurrencyRateID",
						"type": "Int32"
					},
					{
						"name": "SubTotal",
						"type": "Decimal"
					},
					{
						"name": "TaxAmt",
						"type": "Decimal"
					},
					{
						"name": "Freight",
						"type": "Decimal"
					},
					{
						"name": "TotalDue",
						"type": "Decimal"
					},
					{
						"name": "Comment",
						"type": "String"
					},
					{
						"name": "rowguid",
						"type": "Guid"
					},
					{
						"name": "ModifiedDate",
						"type": "DateTime"
					}
				],
				"typeProperties": {
					"tableName": "[concat('[', 'Sales].[SalesOrderHeader]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": {
						"value": "[parameters('SinkDataset_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": "[parameters('SinkDataset_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[data_source_table]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_ael')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_cce')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "customerID",
						"type": "String"
					},
					{
						"name": "companyName",
						"type": "String"
					},
					{
						"name": "contactName",
						"type": "String"
					},
					{
						"name": "contactTitle",
						"type": "String"
					},
					{
						"name": "address.street",
						"type": "String"
					},
					{
						"name": "address.city",
						"type": "String"
					},
					{
						"name": "address.region",
						"type": "String"
					},
					{
						"name": "address.postalCode",
						"type": "String"
					},
					{
						"name": "address.country",
						"type": "String"
					},
					{
						"name": "address.phone",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "JsonFormat",
						"filePattern": "arrayOfObjects",
						"jsonPathDefinition": {
							"customerID": "$.['customerID']",
							"companyName": "$.['companyName']",
							"contactName": "$.['contactName']",
							"contactTitle": "$.['contactTitle']",
							"address.street": "$.['address']['street']",
							"address.city": "$.['address']['city']",
							"address.region": "$.['address']['region']",
							"address.postalCode": "$.['address']['postalCode']",
							"address.country": "$.['address']['country']",
							"address.phone": "$.['address']['phone']"
						}
					},
					"fileName": "[parameters('SourceDataset_cce_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('SourceDataset_cce_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_d2r')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "playerID",
						"type": "String"
					},
					{
						"name": "yearID",
						"type": "Int64"
					},
					{
						"name": "stint",
						"type": "Int64"
					},
					{
						"name": "teamID",
						"type": "String"
					},
					{
						"name": "lgID",
						"type": "String"
					},
					{
						"name": "G",
						"type": "Int64"
					},
					{
						"name": "AB",
						"type": "Int64"
					},
					{
						"name": "R",
						"type": "Int64"
					},
					{
						"name": "H",
						"type": "Int64"
					},
					{
						"name": "H2B",
						"type": "Int64"
					},
					{
						"name": "H3B",
						"type": "Int64"
					},
					{
						"name": "HR",
						"type": "Int64"
					},
					{
						"name": "RBI",
						"type": "Int64"
					},
					{
						"name": "SB",
						"type": "Int64"
					},
					{
						"name": "CS",
						"type": "Int64"
					},
					{
						"name": "BB",
						"type": "Int64"
					},
					{
						"name": "SO",
						"type": "Int64"
					},
					{
						"name": "IBB",
						"type": "String"
					},
					{
						"name": "HBP",
						"type": "String"
					},
					{
						"name": "SH",
						"type": "String"
					},
					{
						"name": "SF",
						"type": "String"
					},
					{
						"name": "GIDP",
						"type": "Int64"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('SourceDataset_d2r_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('SourceDataset_d2r_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_dia')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "movieId",
						"type": "Int64"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"quoteChar": "\"",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('SourceDataset_dia_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('SourceDataset_dia_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_e4g')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[mktzips]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_hii')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "playerID",
						"type": "String"
					},
					{
						"name": "yearID",
						"type": "Int64"
					},
					{
						"name": "stint",
						"type": "Int64"
					},
					{
						"name": "teamID",
						"type": "String"
					},
					{
						"name": "lgID",
						"type": "String"
					},
					{
						"name": "G",
						"type": "Int64"
					},
					{
						"name": "AB",
						"type": "Int64"
					},
					{
						"name": "R",
						"type": "Int64"
					},
					{
						"name": "H",
						"type": "Int64"
					},
					{
						"name": "H2B",
						"type": "Int64"
					},
					{
						"name": "H3B",
						"type": "Int64"
					},
					{
						"name": "HR",
						"type": "Int64"
					},
					{
						"name": "RBI",
						"type": "Int64"
					},
					{
						"name": "SB",
						"type": "Int64"
					},
					{
						"name": "CS",
						"type": "Int64"
					},
					{
						"name": "BB",
						"type": "Int64"
					},
					{
						"name": "SO",
						"type": "Int64"
					},
					{
						"name": "IBB",
						"type": "String"
					},
					{
						"name": "HBP",
						"type": "String"
					},
					{
						"name": "SH",
						"type": "String"
					},
					{
						"name": "SF",
						"type": "String"
					},
					{
						"name": "GIDP",
						"type": "Int64"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('SourceDataset_hii_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('SourceDataset_hii_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_unp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "Env",
						"type": "Int64"
					},
					{
						"name": "LibraryName",
						"type": "String"
					},
					{
						"name": "ObjectName",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('SourceDataset_unp_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('SourceDataset_unp_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_xps')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[mktzips]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_y4j')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_tableName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": {
						"value": "@dataset().cw_tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemoDayStatsSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('TaxiDemoDayStatsSink_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('TaxiDemoDayStatsSink_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemoTotalByPaymentType')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('TaxiDemoTotalByPaymentType_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('TaxiDemoTotalByPaymentType_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemoVendorStatsSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('TaxiDemoVendorStatsSink_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('TaxiDemoVendorStatsSink_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/USDOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('USDOutput_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('USDOutput_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WatermarkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[watermarktable]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfdropoff')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('adfdropoff_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('adfdropoff_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adfpickup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedService1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "FileShare",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('adfpickup_properties_typeProperties_fileName')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_params')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Params"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "Prop_0",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('blob_params_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('blob_params_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/driftout')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Drifts"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('driftout_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('driftout_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/jsonblob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Misc"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "_id",
						"type": "String"
					},
					{
						"name": "city",
						"type": "String"
					},
					{
						"name": "loc",
						"type": "String"
					},
					{
						"name": "pop",
						"type": "Int64"
					},
					{
						"name": "state",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "JsonFormat",
						"filePattern": "setOfObjects"
					},
					"fileName": "[parameters('jsonblob_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('jsonblob_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/locationMap')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"quoteChar": "\"",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('locationMap_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('locationMap_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movie_dataflow_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('movie_dataflow_sink_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('movie_dataflow_sink_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movie_dataflow_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"quoteChar": "\"",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('movie_dataflow_source_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('movie_dataflow_source_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"quoteChar": "\"",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('movies2_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('movies2_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/newbattingtable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Baseball"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "batting1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/others')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('others_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('others_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/salesdrift')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Drifts"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('salesdrift_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('salesdrift_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/soccer_events')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Soccer"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "id_odsp",
						"type": "String"
					},
					{
						"name": "id_event",
						"type": "String"
					},
					{
						"name": "sort_order",
						"type": "Int32"
					},
					{
						"name": "time",
						"type": "String"
					},
					{
						"name": "text",
						"type": "String"
					},
					{
						"name": "event_type",
						"type": "String"
					},
					{
						"name": "event_type2",
						"type": "String"
					},
					{
						"name": "side",
						"type": "String"
					},
					{
						"name": "event_team",
						"type": "String"
					},
					{
						"name": "opponent",
						"type": "String"
					},
					{
						"name": "player",
						"type": "String"
					},
					{
						"name": "player2",
						"type": "String"
					},
					{
						"name": "player_in",
						"type": "String"
					},
					{
						"name": "player_out",
						"type": "String"
					},
					{
						"name": "shot_place",
						"type": "String"
					},
					{
						"name": "shot_outcome",
						"type": "String"
					},
					{
						"name": "is_goal",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "bodypart",
						"type": "String"
					},
					{
						"name": "assist_method",
						"type": "String"
					},
					{
						"name": "situation",
						"type": "String"
					},
					{
						"name": "fast_break",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"quoteChar": "\"",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('soccer_events_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('soccer_events_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/taxi_trip_data_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": "hack_license",
						"type": "String"
					},
					{
						"name": "vendor_id",
						"type": "String"
					},
					{
						"name": "rate_code",
						"type": "String"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "dropoff_datetime",
						"type": "String"
					},
					{
						"name": "passenger_count",
						"type": "String"
					},
					{
						"name": "trip_time_in_secs",
						"type": "String"
					},
					{
						"name": "trip_distance",
						"type": "String"
					},
					{
						"name": "pickup_longitude",
						"type": "String"
					},
					{
						"name": "pickup_latitude",
						"type": "String"
					},
					{
						"name": "dropoff_longitude",
						"type": "String"
					},
					{
						"name": "dropoff_latitude",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('taxi_trip_data_input_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('taxi_trip_data_input_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/taxi_trip_fare_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": " hack_license",
						"type": "String"
					},
					{
						"name": " vendor_id",
						"type": "String"
					},
					{
						"name": " pickup_datetime",
						"type": "String"
					},
					{
						"name": " payment_type",
						"type": "String"
					},
					{
						"name": " fare_amount",
						"type": "String"
					},
					{
						"name": " surcharge",
						"type": "String"
					},
					{
						"name": " mta_tax",
						"type": "String"
					},
					{
						"name": " tip_amount",
						"type": "String"
					},
					{
						"name": " tolls_amount",
						"type": "String"
					},
					{
						"name": " total_amount",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": true
					},
					"fileName": "[parameters('taxi_trip_fare_input_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('taxi_trip_fare_input_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AmazonS3Source')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "AmazonS3",
				"typeProperties": {
					"accessKeyId": "[parameters('AmazonS3Source_properties_typeProperties_accessKeyId')]",
					"secretAccessKey": {
						"type": "SecureString",
						"value": "[parameters('AmazonS3Source_secretAccessKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBatch')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBatch",
				"typeProperties": {
					"accountName": "[parameters('AzureBatch_properties_typeProperties_accountName')]",
					"accessKey": {
						"type": "SecureString",
						"value": "[parameters('AzureBatch_accessKey')]"
					},
					"batchUri": "[parameters('AzureBatch_properties_typeProperties_batchUri')]",
					"poolName": "lnbatchpool",
					"linkedServiceName": {
						"referenceName": "MyAzureBlobLinkedService",
						"type": "LinkedServiceReference"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobSH')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobSH_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStore1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureDataLakeStore",
				"typeProperties": {
					"dataLakeStoreUri": "[parameters('AzureDataLakeStore1_properties_typeProperties_dataLakeStoreUri')]",
					"tenant": "[parameters('AzureDataLakeStore1_properties_typeProperties_tenant')]",
					"subscriptionId": "[parameters('AzureDataLakeStore1_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('AzureDataLakeStore1_properties_typeProperties_resourceGroupName')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDW1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDW1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDW2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDW2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDWLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDWLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BaseballLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('BaseballLS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWDimProd')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('DWDimProd_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LNAKV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LNAKV_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MyAzureBlobLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"description": "Replace with the valid credential before running data flow job.",
				"annotations": [],
				"type": "AzureStorage",
				"typeProperties": {
					"connectionString": "[parameters('MyAzureBlobLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MyDataBricksLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"description": "Replace with the valid credential before running data flow job.",
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://eastus2.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('MyDataBricksLinkedService_accessToken')]"
					},
					"existingClusterId": "0123-215543-heal203"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SharePointOData')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "OData",
				"typeProperties": {
					"url": "[parameters('SharePointOData_properties_typeProperties_url')]",
					"authenticationType": "Basic",
					"userName": "[parameters('SharePointOData_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SharePointOData_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "[parameters('integrationRuntime_integrationRuntime1')]",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/', parameters('integrationRuntime_integrationRuntime1'))]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adlsgen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('adlsgen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('adlsgen2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "d:\\adfpickup",
					"userId": "[parameters('linkedService1_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('linkedService1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "[parameters('integrationRuntime_integrationRuntime1')]",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/', parameters('integrationRuntime_integrationRuntime1'))]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/', parameters('integrationRuntime_integrationRuntime1'))]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/', parameters('integrationRuntime_integrationRuntime2'))]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "West US 2",
						"nodeSize": "Standard_D4_v2",
						"numberOfNodes": 2,
						"maxParallelExecutionsPerNode": 1,
						"vNetProperties": {
							"vNetId": "/subscriptions/1e42591f-1f0c-4c5a-b7f2-a268f6105ec5/resourceGroups/SKResourceGroup/providers/Microsoft.Network/virtualNetworks/MyLinuxVMVNET",
							"subnet": "MyLinuxVMSubnet"
						}
					},
					"ssisProperties": {
						"catalogInfo": {
							"catalogServerEndpoint": "[parameters('integrationRuntime2_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint')]",
							"catalogAdminUserName": "[parameters('integrationRuntime2_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName')]",
							"catalogAdminPassword": {
								"type": "SecureString",
								"value": "[parameters('integrationRuntime2_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword')]"
							},
							"catalogPricingTier": "S0"
						},
						"edition": "Standard",
						"licenseType": "BasePrice"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/', parameters('integrationRuntime_integrationRuntime3'))]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/', parameters('integrationRuntime_selfhostedir'))]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Baseball 1 Basic Stats')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"folder": {
					"name": "Baseball"
				},
				"sources": [
					{
						"dataset": {
							"referenceName": "BaseballBatting",
							"type": "DatasetReference"
						},
						"name": "sourceBatting",
						"script": "source(output(\n\t\tplayerID as string,\n\t\tyearID as string,\n\t\tstint as string,\n\t\tteamID as string,\n\t\tlgID as string,\n\t\tG as integer,\n\t\tAB as integer,\n\t\tR as integer,\n\t\tH as integer,\n\t\tH2B as integer,\n\t\tH3B as integer,\n\t\tHR as integer,\n\t\tRBI as integer,\n\t\tSB as integer,\n\t\tCS as integer,\n\t\tBB as integer,\n\t\tSO as integer,\n\t\tIBB as integer,\n\t\tHBP as integer,\n\t\tSH as integer,\n\t\tSF as integer,\n\t\tGIDP as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> sourceBatting",
						"typeProperties": {}
					},
					{
						"dataset": {
							"referenceName": "PlayersBlob",
							"type": "DatasetReference"
						},
						"name": "sourcePlayer",
						"script": "source(output(\n\t\tplayerID as string,\n\t\tbirthYear as string,\n\t\tbirthMonth as string,\n\t\tbirthDay as string,\n\t\tbirthCountry as string,\n\t\tbirthState as string,\n\t\tbirthCity as string,\n\t\tdeathYear as string,\n\t\tdeathMonth as string,\n\t\tdeathDay as string,\n\t\tdeathCountry as string,\n\t\tdeathState as string,\n\t\tdeathCity as string,\n\t\tnameFirst as string,\n\t\tnameLast as string,\n\t\tnameGiven as string,\n\t\tweight as string,\n\t\theight as string,\n\t\tbats as string,\n\t\tthrows as string,\n\t\tdebut as string,\n\t\tfinalGame as string,\n\t\tretroID as string,\n\t\tbbrefID as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> sourcePlayer",
						"typeProperties": {}
					}
				],
				"sinks": [
					{
						"dataset": {
							"referenceName": "newbattingtable",
							"type": "DatasetReference"
						},
						"name": "sink1",
						"script": "AddTimestamp sink(format: 'table',\n\tstaged: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tplayerID_yearID,\n\t\tBA,\n\t\tOBP,\n\t\tSLG,\n\t\tTB,\n\t\tbirthYear,\n\t\tbirthMonth,\n\t\tbirthDay,\n\t\tbirthCountry,\n\t\tbirthState,\n\t\tbirthCity,\n\t\tdeathYear,\n\t\tdeathMonth,\n\t\tdeathDay,\n\t\tdeathCountry,\n\t\tdeathState,\n\t\tdeathCity,\n\t\tnameFirst,\n\t\tnameLast,\n\t\tnameGiven,\n\t\tweight,\n\t\theight,\n\t\tbats,\n\t\tthrows,\n\t\tdebut,\n\t\tfinalGame,\n\t\tretroID,\n\t\tbbrefID,\n\t\tplayerID = OrigSourceBatting@playerID,\n\t\tyearID,\n\t\tstint,\n\t\tteamID,\n\t\tlgID,\n\t\tG,\n\t\tAB,\n\t\tR,\n\t\tH,\n\t\tH2B,\n\t\tH3B,\n\t\tHR,\n\t\tRBI,\n\t\tSB,\n\t\tCS,\n\t\tBB,\n\t\tSO,\n\t\tIBB,\n\t\tHBP,\n\t\tSH,\n\t\tSF,\n\t\tGIDP,\n\t\tcurrenttime\n\t),\n\tsaveMode:'overwrite') ~> sink1"
					}
				],
				"transformations": [
					{
						"name": "createAggs",
						"script": "sourceBatting aggregate(groupBy(playerID_yearID = playerID+'_'+yearID),\n\tBA = round(avg(H/AB),3),\n\t\tOBP = round(avg((H+BB+HBP)/(AB+BB+HBP+SF)),3),\n\t\tSLG = round(avg(((HR * 4) + (H3B * 3) + (H2B * 2) + (H-H2B-H3B-HR))/AB),3),\n\t\tTB = max((HR * 4) + (H3B * 3) + (H2B * 2) + (H-H2B-H3B-HR))) ~> createAggs"
					},
					{
						"name": "Join1",
						"script": "createAggs, PlayerInfoPlusOrigStats join(playerID_yearID == sourcePlayer@playerID + '_'+yearID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join1"
					},
					{
						"name": "PlayerInfoPlusOrigStats",
						"script": "sourcePlayer, OrigSourceBatting join(sourcePlayer@playerID == OrigSourceBatting@playerID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> PlayerInfoPlusOrigStats"
					},
					{
						"name": "OrigSourceBatting",
						"script": "sourceBatting select()~> OrigSourceBatting"
					},
					{
						"name": "AddTimestamp",
						"script": "Join1 derive(currenttime = currentTimestamp()) ~> AddTimestamp"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BaseballBatting')]",
				"[concat(variables('factoryId'), '/datasets/PlayersBlob')]",
				"[concat(variables('factoryId'), '/datasets/newbattingtable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Baseball 1 Norm Batting Stats')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"folder": {
					"name": "Baseball"
				},
				"sources": [
					{
						"dataset": {
							"referenceName": "BaseballBatting",
							"type": "DatasetReference"
						},
						"name": "sourceBatting",
						"script": "source(output(\n\t\tplayerID as string,\n\t\tyearID as string,\n\t\tstint as string,\n\t\tteamID as string,\n\t\tlgID as string,\n\t\tG as integer,\n\t\tAB as integer,\n\t\tR as integer,\n\t\tH as integer,\n\t\tH2B as integer,\n\t\tH3B as integer,\n\t\tHR as integer,\n\t\tRBI as integer,\n\t\tSB as integer,\n\t\tCS as integer,\n\t\tBB as integer,\n\t\tSO as integer,\n\t\tIBB as integer,\n\t\tHBP as integer,\n\t\tSH as integer,\n\t\tSF as integer,\n\t\tGIDP as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> sourceBatting",
						"typeProperties": {}
					},
					{
						"dataset": {
							"referenceName": "PlayersBlob",
							"type": "DatasetReference"
						},
						"name": "sourcePlayer",
						"script": "source(output(\n\t\tplayerID as string,\n\t\tbirthYear as string,\n\t\tbirthMonth as string,\n\t\tbirthDay as string,\n\t\tbirthCountry as string,\n\t\tbirthState as string,\n\t\tbirthCity as string,\n\t\tdeathYear as string,\n\t\tdeathMonth as string,\n\t\tdeathDay as string,\n\t\tdeathCountry as string,\n\t\tdeathState as string,\n\t\tdeathCity as string,\n\t\tnameFirst as string,\n\t\tnameLast as string,\n\t\tnameGiven as string,\n\t\tweight as string,\n\t\theight as string,\n\t\tbats as string,\n\t\tthrows as string,\n\t\tdebut as string,\n\t\tfinalGame as string,\n\t\tretroID as string,\n\t\tbbrefID as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> sourcePlayer",
						"typeProperties": {}
					}
				],
				"sinks": [
					{
						"dataset": {
							"referenceName": "AzureBlobBaseballOutput",
							"type": "DatasetReference"
						},
						"name": "sink1",
						"script": "Join1 sink(mapColumn(\n\t\tBA,\n\t\tOBP,\n\t\tSLG,\n\t\tbirthYear,\n\t\tbirthMonth,\n\t\tbirthDay,\n\t\tbirthCountry,\n\t\tbirthState,\n\t\tbirthCity,\n\t\tdeathYear,\n\t\tdeathMonth,\n\t\tdeathDay,\n\t\tdeathCountry,\n\t\tdeathState,\n\t\tdeathCity,\n\t\tnameFirst,\n\t\tnameLast,\n\t\tnameGiven,\n\t\tweight,\n\t\theight,\n\t\tbats,\n\t\tthrows,\n\t\tdebut,\n\t\tfinalGame,\n\t\tretroID,\n\t\tbbrefID,\n\t\tplayerID = OrigSourceBatting@playerID,\n\t\tyearID = OrigSourceBatting@yearID,\n\t\tstint,\n\t\tteamID,\n\t\tlgID,\n\t\tG,\n\t\tAB,\n\t\tR,\n\t\tH,\n\t\tH2B,\n\t\tH3B,\n\t\tHR,\n\t\tRBI,\n\t\tSB,\n\t\tCS,\n\t\tBB,\n\t\tSO,\n\t\tIBB,\n\t\tHBP,\n\t\tSH,\n\t\tSF,\n\t\tGIDP,\n\t\tTB\n\t),\n\tsaveMode:'overwrite') ~> sink1",
						"maxConcurrentConnections": 10
					}
				],
				"transformations": [
					{
						"name": "createAggs",
						"script": "CalcTotalBases aggregate(groupBy(playerID,\n\t\tyearID),\n\tBA = round(avg(H/AB),3),\n\t\tOBP = round(avg((H+BB+HBP)/(AB+BB+HBP+SF)),3),\n\t\tSLG = round(avg(TB/AB),3)) ~> createAggs"
					},
					{
						"name": "Join1",
						"script": "createAggs, PlayerInfoPlusOrigStats join(createAggs@playerID == sourcePlayer@playerID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join1"
					},
					{
						"name": "PlayerInfoPlusOrigStats",
						"script": "sourcePlayer, OrigSourceBatting join(sourcePlayer@playerID == OrigSourceBatting@playerID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> PlayerInfoPlusOrigStats"
					},
					{
						"name": "CalcTotalBases",
						"script": "sourceBatting derive(TB = (HR * 4) + (H3B * 3) + (H2B * 2) + (H-H2B-H3B-HR)) ~> CalcTotalBases"
					},
					{
						"name": "OrigSourceBatting",
						"script": "CalcTotalBases select()~> OrigSourceBatting"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BaseballBatting')]",
				"[concat(variables('factoryId'), '/datasets/PlayersBlob')]",
				"[concat(variables('factoryId'), '/datasets/AzureBlobBaseballOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Baseball 2 Adv Stats')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"description": "Let's now create the advanced Bill James Sabermetrics stats",
				"folder": {
					"name": "Baseball"
				},
				"sources": [
					{
						"dataset": {
							"referenceName": "SQLDBBaseball2",
							"type": "DatasetReference"
						},
						"name": "source1",
						"script": "source(output(\n\t\tBA as double,\n\t\tOBP as double,\n\t\tSLG as double,\n\t\tTB as integer,\n\t\tbirthYear as string,\n\t\tbirthMonth as string,\n\t\tbirthDay as string,\n\t\tbirthCountry as string,\n\t\tbirthState as string,\n\t\tbirthCity as string,\n\t\tdeathYear as string,\n\t\tdeathMonth as string,\n\t\tdeathDay as string,\n\t\tdeathCountry as string,\n\t\tdeathState as string,\n\t\tdeathCity as string,\n\t\tnameFirst as string,\n\t\tnameLast as string,\n\t\tnameGiven as string,\n\t\tweight as string,\n\t\theight as string,\n\t\tbats as string,\n\t\tthrows as string,\n\t\tdebut as string,\n\t\tfinalGame as string,\n\t\tretroID as string,\n\t\tbbrefID as string,\n\t\tplayerID as string,\n\t\tyearID as string,\n\t\tstint as string,\n\t\tteamID as string,\n\t\tlgID as string,\n\t\tG as integer,\n\t\tAB as integer,\n\t\tR as integer,\n\t\tH as integer,\n\t\tH2B as integer,\n\t\tH3B as integer,\n\t\tHR as integer,\n\t\tRBI as integer,\n\t\tSB as integer,\n\t\tCS as integer,\n\t\tBB as integer,\n\t\tSO as integer,\n\t\tIBB as integer,\n\t\tHBP as integer,\n\t\tSH as integer,\n\t\tSF as integer,\n\t\tGIDP as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> source1",
						"typeProperties": {}
					}
				],
				"sinks": [
					{
						"dataset": {
							"referenceName": "DWSabermetrics",
							"type": "DatasetReference"
						},
						"name": "sink1",
						"script": "RunsCreated sink(format: 'table',\n\tstaged: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tBA,\n\t\tOBP,\n\t\tSLG,\n\t\tTB,\n\t\tbirthYear,\n\t\tbirthMonth,\n\t\tbirthDay,\n\t\tbirthCountry,\n\t\tbirthState,\n\t\tbirthCity,\n\t\tdeathYear,\n\t\tdeathMonth,\n\t\tdeathDay,\n\t\tdeathCountry,\n\t\tdeathState,\n\t\tdeathCity,\n\t\tnameFirst,\n\t\tnameLast,\n\t\tnameGiven,\n\t\tweight,\n\t\theight,\n\t\tbats,\n\t\tthrows,\n\t\tdebut,\n\t\tfinalGame,\n\t\tretroID,\n\t\tbbrefID,\n\t\tplayerID,\n\t\tyearID,\n\t\tstint,\n\t\tteamID,\n\t\tlgID,\n\t\tG,\n\t\tAB,\n\t\tR,\n\t\tH,\n\t\tH2B,\n\t\tH3B,\n\t\tHR,\n\t\tRBI,\n\t\tSB,\n\t\tCS,\n\t\tBB,\n\t\tSO,\n\t\tIBB,\n\t\tHBP,\n\t\tSH,\n\t\tSF,\n\t\tGIDP,\n\t\tRunsCreated\n\t),\n\tsaveMode:'overwrite') ~> sink1"
					}
				],
				"transformations": [
					{
						"name": "RunsCreated",
						"script": "source1 derive(RunsCreated = round(  ((H + BB) * TB) / (AB + BB), 3)) ~> RunsCreated"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQLDBBaseball2')]",
				"[concat(variables('factoryId'), '/datasets/DWSabermetrics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BugBash1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"folder": {
					"name": "Bug Bashes"
				},
				"sources": [
					{
						"dataset": {
							"referenceName": "SQLDB_SalesHeader",
							"type": "DatasetReference"
						},
						"name": "SourceSalesHeader",
						"script": "source(output(\n\t\tSalesOrderID as integer,\n\t\tRevisionNumber as string,\n\t\tOrderDate as date,\n\t\tDueDate as date,\n\t\tShipDate as date,\n\t\tStatus as string,\n\t\tOnlineOrderFlag as boolean,\n\t\tSalesOrderNumber as string,\n\t\tPurchaseOrderNumber as string,\n\t\tAccountNumber as string,\n\t\tCustomerID as integer,\n\t\tShipToAddressID as integer,\n\t\tBillToAddressID as integer,\n\t\tShipMethod as string,\n\t\tCreditCardApprovalCode as string,\n\t\tSubTotal as decimal(10,0),\n\t\tTaxAmt as decimal(10,0),\n\t\tFreight as decimal(10,0),\n\t\tTotalDue as decimal(10,0),\n\t\tComment as string,\n\t\trowguid as string,\n\t\tModifiedDate as date\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> SourceSalesHeader",
						"typeProperties": {}
					},
					{
						"dataset": {
							"referenceName": "SQLDB_SalesDetail",
							"type": "DatasetReference"
						},
						"name": "SourceSalesDetail",
						"script": "source(output(\n\t\tSalesOrderID as integer,\n\t\tSalesOrderDetailID as integer,\n\t\tOrderQty as short,\n\t\tProductID as integer,\n\t\tUnitPrice as decimal(10,0),\n\t\tUnitPriceDiscount as decimal(10,0),\n\t\tLineTotal as decimal(10,0),\n\t\trowguid as string,\n\t\tModifiedDate as date\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> SourceSalesDetail",
						"typeProperties": {}
					},
					{
						"dataset": {
							"referenceName": "SQLDB_Products",
							"type": "DatasetReference"
						},
						"name": "SourceProduct",
						"script": "source(output(\n\t\tProductID as integer,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tColor as string,\n\t\tStandardCost as decimal(10,0),\n\t\tListPrice as decimal(10,0),\n\t\tSize as string,\n\t\tWeight as decimal(10,0),\n\t\tProductCategoryID as integer,\n\t\tProductModelID as integer,\n\t\tSellStartDate as date,\n\t\tSellEndDate as date,\n\t\tDiscontinuedDate as date,\n\t\tThumbNailPhoto as string,\n\t\tThumbnailPhotoFileName as string,\n\t\trowguid as string,\n\t\tModifiedDate as date\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> SourceProduct",
						"typeProperties": {}
					}
				],
				"sinks": [
					{
						"dataset": {
							"referenceName": "ADW_FactSales",
							"type": "DatasetReference"
						},
						"name": "SinkFactSales",
						"script": "Join1 sink(format: 'table',\n\tstaged: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tOrderTotal,\n\t\tRevisionNumber,\n\t\tOrderDate,\n\t\tDueDate,\n\t\tShipDate,\n\t\tStatus,\n\t\tOnlineOrderFlag,\n\t\tSalesOrderNumber,\n\t\tPurchaseOrderNumber,\n\t\tAccountNumber,\n\t\tCustomerID,\n\t\tShipToAddressID,\n\t\tBillToAddressID,\n\t\tShipMethod,\n\t\tCreditCardApprovalCode,\n\t\tSubTotal,\n\t\tTaxAmt,\n\t\tFreight,\n\t\tTotalDue,\n\t\tComment,\n\t\trowguid,\n\t\tModifiedDate\n\t),\n\tsaveMode:'overwrite') ~> SinkFactSales"
					},
					{
						"dataset": {
							"referenceName": "ADW_DimProduct",
							"type": "DatasetReference"
						},
						"name": "sinkDimProd",
						"script": "Aggregate2 sink(format: 'table',\n\tstaged: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tName,\n\t\tProdCount\n\t),\n\tsaveMode:'overwrite') ~> sinkDimProd"
					}
				],
				"transformations": [
					{
						"name": "Aggregate1",
						"script": "SourceSalesDetail aggregate(groupBy(SalesOrderID),\n\tOrderTotal = sum(LineTotal)) ~> Aggregate1"
					},
					{
						"name": "Join1",
						"script": "Aggregate1, SourceSalesHeader join(Aggregate1@SalesOrderID == SourceSalesHeader@SalesOrderID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join1"
					},
					{
						"name": "Join2",
						"script": "SourceSalesDetail, SourceProduct join(SourceSalesDetail@ProductID == SourceProduct@ProductID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join2"
					},
					{
						"name": "Aggregate2",
						"script": "Join2 aggregate(groupBy(Name),\n\tProdCount = sum(1)) ~> Aggregate2"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQLDB_SalesHeader')]",
				"[concat(variables('factoryId'), '/datasets/SQLDB_SalesDetail')]",
				"[concat(variables('factoryId'), '/datasets/SQLDB_Products')]",
				"[concat(variables('factoryId'), '/datasets/ADW_FactSales')]",
				"[concat(variables('factoryId'), '/datasets/ADW_DimProduct')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BugBash2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"folder": {
					"name": "Bug Bashes"
				},
				"sources": [
					{
						"dataset": {
							"referenceName": "SQLDB_SalesHeader",
							"type": "DatasetReference"
						},
						"name": "SourceSalesHeader",
						"script": "source(output(\n\t\tSalesOrderID as integer,\n\t\tRevisionNumber as string,\n\t\tOrderDate as date,\n\t\tDueDate as date,\n\t\tShipDate as date,\n\t\tStatus as string,\n\t\tOnlineOrderFlag as boolean,\n\t\tSalesOrderNumber as string,\n\t\tPurchaseOrderNumber as string,\n\t\tAccountNumber as string,\n\t\tCustomerID as integer,\n\t\tShipToAddressID as integer,\n\t\tBillToAddressID as integer,\n\t\tShipMethod as string,\n\t\tCreditCardApprovalCode as string,\n\t\tSubTotal as decimal(10,0),\n\t\tTaxAmt as decimal(10,0),\n\t\tFreight as decimal(10,0),\n\t\tTotalDue as decimal(10,0),\n\t\tComment as string,\n\t\trowguid as string,\n\t\tModifiedDate as date\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> SourceSalesHeader",
						"typeProperties": {}
					},
					{
						"dataset": {
							"referenceName": "SQLDB_SalesDetail",
							"type": "DatasetReference"
						},
						"name": "SourceSalesDetail",
						"script": "source(output(\n\t\tSalesOrderID as integer,\n\t\tSalesOrderDetailID as integer,\n\t\tOrderQty as short,\n\t\tProductID as integer,\n\t\tUnitPrice as decimal(10,0),\n\t\tUnitPriceDiscount as decimal(10,0),\n\t\tLineTotal as decimal(10,0),\n\t\trowguid as string,\n\t\tModifiedDate as date\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> SourceSalesDetail",
						"typeProperties": {}
					},
					{
						"dataset": {
							"referenceName": "SQLDB_Products",
							"type": "DatasetReference"
						},
						"name": "SourceProduct",
						"script": "source(output(\n\t\tProductID as integer,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tColor as string,\n\t\tStandardCost as decimal(10,0),\n\t\tListPrice as decimal(10,0),\n\t\tSize as string,\n\t\tWeight as decimal(10,0),\n\t\tProductCategoryID as integer,\n\t\tProductModelID as integer,\n\t\tSellStartDate as date,\n\t\tSellEndDate as date,\n\t\tDiscontinuedDate as date,\n\t\tThumbNailPhoto as string,\n\t\tThumbnailPhotoFileName as string,\n\t\trowguid as string,\n\t\tModifiedDate as date\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> SourceProduct",
						"typeProperties": {}
					},
					{
						"dataset": {
							"referenceName": "SQLDB_ProdCat",
							"type": "DatasetReference"
						},
						"name": "ProdCategoryLookup",
						"script": "source(output(\n\t\tProductCategoryID as integer,\n\t\tParentProductCategoryID as integer,\n\t\tName as string,\n\t\trowguid as string,\n\t\tModifiedDate as date\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> ProdCategoryLookup",
						"typeProperties": {}
					}
				],
				"sinks": [
					{
						"dataset": {
							"referenceName": "ADW_FactSales",
							"type": "DatasetReference"
						},
						"name": "SinkFactSales",
						"script": "Join1 sink(format: 'table',\n\tstaged: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tSalesOrderID = Aggregate1@SalesOrderID,\n\t\tOrderTotal,\n\t\tRevisionNumber,\n\t\tOrderDate,\n\t\tDueDate,\n\t\tShipDate,\n\t\tStatus,\n\t\tOnlineOrderFlag,\n\t\tSalesOrderNumber,\n\t\tPurchaseOrderNumber,\n\t\tAccountNumber,\n\t\tCustomerID,\n\t\tShipToAddressID,\n\t\tBillToAddressID,\n\t\tShipMethod,\n\t\tCreditCardApprovalCode,\n\t\tSubTotal,\n\t\tTaxAmt,\n\t\tFreight,\n\t\tTotalDue,\n\t\tComment,\n\t\trowguid,\n\t\tModifiedDate\n\t),\n\tsaveMode:'overwrite') ~> SinkFactSales"
					},
					{
						"dataset": {
							"referenceName": "ADW_DimProduct",
							"type": "DatasetReference"
						},
						"name": "sinkDimProd",
						"script": "Aggregate2 sink(format: 'table',\n\tstaged: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tProdName = Color,\n\t\tProdCount\n\t),\n\tsaveMode:'overwrite') ~> sinkDimProd"
					}
				],
				"transformations": [
					{
						"name": "Aggregate1",
						"script": "SourceSalesDetail aggregate(groupBy(SalesOrderID),\n\tOrderTotal = sum(LineTotal)) ~> Aggregate1"
					},
					{
						"name": "Join1",
						"script": "Aggregate1, SourceSalesHeader join(Aggregate1@SalesOrderID == SourceSalesHeader@SalesOrderID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join1"
					},
					{
						"name": "Join2",
						"script": "SourceSalesDetail, Select1 join(SourceSalesDetail@ProductID == Select1@ProductID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join2"
					},
					{
						"name": "Aggregate2",
						"script": "Join2 aggregate(groupBy(Color),\n\tProdCount = sum(1)) ~> Aggregate2"
					},
					{
						"name": "Lookup1",
						"script": "ProdCategoryLookup, SourceProduct lookup(ProdCategoryLookup@ProductCategoryID == SourceProduct@ProductCategoryID,\n\tbroadcast: 'none')~> Lookup1"
					},
					{
						"name": "Select1",
						"script": "Lookup1 select(mapColumn(\n\t\tProdCategoryLookup@ProductCategoryID,\n\t\tParentProductCategoryID,\n\t\tProdCategoryLookup@Name,\n\t\tProductID,\n\t\tSourceProduct@Name,\n\t\tProductNumber,\n\t\tColor,\n\t\tStandardCost,\n\t\tListPrice,\n\t\tSize,\n\t\tWeight,\n\t\tProductModelID,\n\t\tSellStartDate,\n\t\tSellEndDate,\n\t\tDiscontinuedDate\n\t))~> Select1"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQLDB_SalesHeader')]",
				"[concat(variables('factoryId'), '/datasets/SQLDB_SalesDetail')]",
				"[concat(variables('factoryId'), '/datasets/SQLDB_Products')]",
				"[concat(variables('factoryId'), '/datasets/SQLDB_ProdCat')]",
				"[concat(variables('factoryId'), '/datasets/ADW_FactSales')]",
				"[concat(variables('factoryId'), '/datasets/ADW_DimProduct')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CleanTitle')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"sources": [
					{
						"dataset": {
							"referenceName": "MoviesDBDataset",
							"type": "DatasetReference"
						},
						"name": "source1",
						"script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\t{Rotton Tomato} as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1",
						"typeProperties": {}
					}
				],
				"sinks": [],
				"transformations": [
					{
						"name": "CleanTitle",
						"script": "source1 derive(title = iif(locate(' (',title)==0,title,left(title,locate(' (',title)))) ~> CleanTitle"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesDBDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Currency Converter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"description": "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
				"sources": [
					{
						"dataset": {
							"referenceName": "CurrencyDatasetUSD",
							"type": "DatasetReference"
						},
						"name": "USDCurrency",
						"script": "source(output(\n\t\tPreviousConversionRate as double,\n\t\tCountry as string,\n\t\tDateTime1 as string,\n\t\tCurrentConversionRate as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> USDCurrency",
						"typeProperties": {}
					},
					{
						"dataset": {
							"referenceName": "CurrencyDatasetCAD",
							"type": "DatasetReference"
						},
						"name": "CADSource",
						"script": "source(output(\n\t\tPreviousConversionRate as double,\n\t\tCountry as string,\n\t\tDateTime1 as string,\n\t\tCurrentConversionRate as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> CADSource",
						"typeProperties": {}
					}
				],
				"sinks": [
					{
						"dataset": {
							"referenceName": "USDOutput",
							"type": "DatasetReference"
						},
						"name": "USDSink",
						"script": "ConditionalSplit1@USD sink(saveMode:'overwrite') ~> USDSink"
					},
					{
						"dataset": {
							"referenceName": "CADOutput",
							"type": "DatasetReference"
						},
						"name": "CADSink",
						"script": "ConditionalSplit1@CAD sink(saveMode:'overwrite') ~> CADSink"
					}
				],
				"transformations": [
					{
						"name": "Union",
						"description": "The Union combines 2 streams together",
						"script": "USDCurrency, CADSource union(byName: true)~> Union"
					},
					{
						"name": "NewCurrencyColumn",
						"description": "Create a new calculated column from currency rate",
						"script": "Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn"
					},
					{
						"name": "ConditionalSplit1",
						"description": "Split the data on state to create 2 streams",
						"script": "NewCurrencyColumn split(Country == 'USD',\n\tCountry == 'CAD',\n\tdisjoint: false) ~> ConditionalSplit1@(USD, CAD)"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CurrencyDatasetUSD')]",
				"[concat(variables('factoryId'), '/datasets/CurrencyDatasetCAD')]",
				"[concat(variables('factoryId'), '/datasets/USDOutput')]",
				"[concat(variables('factoryId'), '/datasets/CADOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DB Test 2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"folder": {
					"name": "Misc"
				},
				"sources": [
					{
						"dataset": {
							"referenceName": "AzureSqlDWTable3",
							"type": "DatasetReference"
						},
						"name": "source1",
						"script": "source(output(\n\t\tName as string,\n\t\tProdCount as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> source1",
						"typeProperties": {}
					}
				],
				"sinks": [
					{
						"dataset": {
							"referenceName": "AzureSqlDWTable3",
							"type": "DatasetReference"
						},
						"name": "sink1",
						"script": "source1 sink(format: 'table',\n\tstaged: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tdigit = Name\n\t),\n\tsaveMode:'append') ~> sink1"
					}
				],
				"transformations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDWTable3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DB Test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"folder": {
					"name": "Misc"
				},
				"sources": [
					{
						"dataset": {
							"referenceName": "ADW_DimProduct",
							"type": "DatasetReference"
						},
						"name": "source1",
						"script": "source(output(\n\t\tProdName as string,\n\t\tProdCount as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> source1",
						"typeProperties": {}
					}
				],
				"sinks": [
					{
						"dataset": {
							"referenceName": "ADW_DimProduct",
							"type": "DatasetReference"
						},
						"name": "sink1",
						"script": "source1 sink(format: 'table',\n\tstaged: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tProdName,\n\t\tProdCount\n\t),\n\tsaveMode:'append') ~> sink1"
					}
				],
				"transformations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADW_DimProduct')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Drift2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"folder": {
					"name": "Demos"
				},
				"sources": [
					{
						"dataset": {
							"referenceName": "salesdrift",
							"type": "DatasetReference"
						},
						"name": "SalesSource1",
						"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> SalesSource1",
						"typeProperties": {}
					}
				],
				"sinks": [],
				"transformations": [
					{
						"name": "AddTax",
						"script": "SalesSource1 derive(each(match(name == 'COGS' || name == 'Cost'), $$+'_with_tax' = round(toDouble(trim($$,'$')) * 1.09,2))) ~> AddTax"
					},
					{
						"name": "CleanTotal",
						"script": "AddTax derive(each(match(locate('with_tax',name) > 0), $$ = left('$'+toString($$)+'00',locate('.', $$)+3))) ~> CleanTotal"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/salesdrift')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MovieDemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"description": "Sample demo data flow to transform movie data showing usage of derive transformation.",
				"sources": [
					{
						"dataset": {
							"referenceName": "movie_dataflow_source",
							"type": "DatasetReference"
						},
						"name": "Movies",
						"script": "source(output(\n\t\tmovieId as string,\n\t\ttitle as string,\n\t\tgenres as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Movies",
						"typeProperties": {}
					}
				],
				"sinks": [
					{
						"dataset": {
							"referenceName": "movie_dataflow_sink",
							"type": "DatasetReference"
						},
						"name": "Output",
						"script": "MoviesYear sink(saveMode:'overwrite') ~> Output"
					}
				],
				"transformations": [
					{
						"name": "MoviesYear",
						"script": "Movies derive(year = toInteger(trim(right(title, 6), '()')),\n\t\ttitle = toString(left(title, length(title)-6))) ~> MoviesYear"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movie_dataflow_source')]",
				"[concat(variables('factoryId'), '/datasets/movie_dataflow_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MyDemoDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"folder": {
					"name": "Demos"
				},
				"sources": [
					{
						"dataset": {
							"referenceName": "MoviesDBDataset",
							"type": "DatasetReference"
						},
						"name": "source1",
						"script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\t{Rotton Tomato} as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> source1",
						"typeProperties": {}
					}
				],
				"sinks": [
					{
						"dataset": {
							"referenceName": "DemoSinkDataset",
							"type": "DatasetReference"
						},
						"name": "sink1",
						"script": "Aggregate1 sink(saveMode:'overwrite') ~> sink1"
					}
				],
				"transformations": [
					{
						"name": "MoviesBefore1990",
						"script": "source1 filter(year < 1990) ~> MoviesBefore1990"
					},
					{
						"name": "Aggregate1",
						"script": "MoviesBefore1990 aggregate(groupBy(genres),\n\tRating = avg(Rating)) ~> Aggregate1"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesDBDataset')]",
				"[concat(variables('factoryId'), '/datasets/DemoSinkDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RankDemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"folder": {
					"name": "Demos"
				},
				"sources": [
					{
						"dataset": {
							"referenceName": "AzureSQLIncremental_Changes",
							"type": "DatasetReference"
						},
						"name": "source1",
						"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1",
						"typeProperties": {}
					}
				],
				"sinks": [],
				"transformations": [
					{
						"name": "SurrogateKey1",
						"script": "source1 keyGenerate(output(undefined as long),\n\tstartAt: 1L) ~> SurrogateKey1"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLIncremental_Changes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD Dataflow 2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"folder": {
					"name": "Demos"
				},
				"sources": [
					{
						"dataset": {
							"referenceName": "ADW_FactSales",
							"type": "DatasetReference"
						},
						"name": "source1",
						"script": "source(output(\n\t\tOrderTotal as decimal(10,0),\n\t\tRevisionNumber as string,\n\t\tOrderDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tShipDate as timestamp,\n\t\tStatus as string,\n\t\tOnlineOrderFlag as boolean,\n\t\tSalesOrderNumber as string,\n\t\tPurchaseOrderNumber as string,\n\t\tAccountNumber as string,\n\t\tCustomerID as integer,\n\t\tShipToAddressID as integer,\n\t\tBillToAddressID as integer,\n\t\tShipMethod as string,\n\t\tCreditCardApprovalCode as string,\n\t\tSubTotal as decimal(10,0),\n\t\tTaxAmt as decimal(10,0),\n\t\tFreight as decimal(10,0),\n\t\tTotalDue as decimal(10,0),\n\t\tComment as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> source1",
						"typeProperties": {}
					}
				],
				"sinks": [
					{
						"dataset": {
							"referenceName": "ADW_FactSales",
							"type": "DatasetReference"
						},
						"name": "sink1",
						"script": "source1 sink(format: 'table',\n\tstaged: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tOrderTotal,\n\t\tRevisionNumber,\n\t\tOrderDate,\n\t\tDueDate,\n\t\tShipDate,\n\t\tStatus,\n\t\tOnlineOrderFlag,\n\t\tSalesOrderNumber,\n\t\tPurchaseOrderNumber,\n\t\tAccountNumber,\n\t\tCustomerID,\n\t\tShipToAddressID,\n\t\tBillToAddressID,\n\t\tShipMethod,\n\t\tCreditCardApprovalCode,\n\t\tSubTotal,\n\t\tTaxAmt,\n\t\tFreight,\n\t\tTotalDue,\n\t\tComment,\n\t\trowguid,\n\t\tModifiedDate\n\t),\n\tsaveMode:'append') ~> sink1"
					}
				],
				"transformations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADW_FactSales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCDType2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"folder": {
					"name": "Demos"
				},
				"sources": [
					{
						"dataset": {
							"referenceName": "SQLProducts",
							"type": "DatasetReference"
						},
						"name": "SQLProducts",
						"script": "source(output(\n\t\tProductID as integer,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tColor as string,\n\t\tStandardCost as decimal(10,0),\n\t\tListPrice as decimal(10,0),\n\t\tSize as string,\n\t\tWeight as decimal(10,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> SQLProducts",
						"typeProperties": {}
					},
					{
						"dataset": {
							"referenceName": "DimProd",
							"type": "DatasetReference"
						},
						"name": "DimProd",
						"script": "source(output(\n\t\tProductKey as integer,\n\t\tProductAlternateKey as string,\n\t\tProductSubcategoryKey as integer,\n\t\tWeightUnitMeasureCode as string,\n\t\tSizeUnitMeasureCode as string,\n\t\tEnglishProductName as string,\n\t\tSpanishProductName as string,\n\t\tFrenchProductName as string,\n\t\tStandardCost as decimal(10,0),\n\t\tFinishedGoodsFlag as boolean,\n\t\tColor as string,\n\t\tSafetyStockLevel as short,\n\t\tReorderPoint as short,\n\t\tListPrice as decimal(10,0),\n\t\tSize as string,\n\t\tSizeRange as string,\n\t\tWeight as double,\n\t\tDaysToManufacture as integer,\n\t\tProductLine as string,\n\t\tDealerPrice as decimal(10,0),\n\t\tClass as string,\n\t\tStyle as string,\n\t\tModelName as string,\n\t\tEnglishDescription as string,\n\t\tFrenchDescription as string,\n\t\tChineseDescription as string,\n\t\tArabicDescription as string,\n\t\tHebrewDescription as string,\n\t\tThaiDescription as string,\n\t\tGermanDescription as string,\n\t\tJapaneseDescription as string,\n\t\tTurkishDescription as string,\n\t\tStartDate as timestamp,\n\t\tEndDate as timestamp,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> DimProd",
						"typeProperties": {}
					}
				],
				"sinks": [
					{
						"dataset": {
							"referenceName": "ADW_DimProduct",
							"type": "DatasetReference"
						},
						"name": "sink1",
						"script": "SetAttributes sink(format: 'table',\n\tstaged: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tProductKey = ProductID,\n\t\tProductAlternateKey = surrogatekey,\n\t\tProductSubcategoryKey,\n\t\tWeightUnitMeasureCode,\n\t\tSizeUnitMeasureCode,\n\t\tEnglishProductName = Name,\n\t\tSpanishProductName,\n\t\tFrenchProductName,\n\t\tStandardCost,\n\t\tFinishedGoodsFlag = mybit,\n\t\tColor,\n\t\tSafetyStockLevel,\n\t\tReorderPoint,\n\t\tListPrice,\n\t\tSize,\n\t\tSizeRange,\n\t\tWeight,\n\t\tDaysToManufacture,\n\t\tProductLine,\n\t\tDealerPrice,\n\t\tClass,\n\t\tStyle,\n\t\tModelName,\n\t\tEnglishDescription,\n\t\tFrenchDescription,\n\t\tChineseDescription,\n\t\tArabicDescription,\n\t\tHebrewDescription,\n\t\tThaiDescription,\n\t\tGermanDescription,\n\t\tJapaneseDescription,\n\t\tTurkishDescription,\n\t\tStartDate,\n\t\tEndDate,\n\t\tStatus\n\t),\n\tsaveMode:'append') ~> sink1"
					}
				],
				"transformations": [
					{
						"name": "LookupKeys",
						"script": "SQLProducts, DimProd join(ProductID == ProductKey,\n\tjoinType:'left',\n\tbroadcast: 'none')~> LookupKeys"
					},
					{
						"name": "ConditionalSplit1",
						"script": "ColumnSelection split(isNull(ProductAlternateKey),\n\tdisjoint: false) ~> ConditionalSplit1@(NewRow, ExistingMember)"
					},
					{
						"name": "SurrogateKey1",
						"script": "ConditionalSplit1@NewRow keyGenerate(output(surrogatekey as long),\n\tstartAt: 1L) ~> SurrogateKey1"
					},
					{
						"name": "ColumnSelection",
						"script": "LookupKeys select(mapColumn(\n\t\tProductID,\n\t\tName,\n\t\tProductNumber,\n\t\tColor = SQLProducts@Color,\n\t\tStandardCost = SQLProducts@StandardCost,\n\t\tListPrice = SQLProducts@ListPrice,\n\t\tSize = SQLProducts@Size,\n\t\tWeight = SQLProducts@Weight,\n\t\tProductKey,\n\t\tProductAlternateKey,\n\t\tProductSubcategoryKey,\n\t\tWeightUnitMeasureCode,\n\t\tSizeUnitMeasureCode,\n\t\tEnglishProductName,\n\t\tSpanishProductName,\n\t\tFrenchProductName,\n\t\tFinishedGoodsFlag,\n\t\tSafetyStockLevel,\n\t\tReorderPoint,\n\t\tSizeRange,\n\t\tDaysToManufacture,\n\t\tProductLine,\n\t\tDealerPrice,\n\t\tClass,\n\t\tStyle,\n\t\tModelName,\n\t\tEnglishDescription,\n\t\tFrenchDescription,\n\t\tChineseDescription,\n\t\tArabicDescription,\n\t\tHebrewDescription,\n\t\tThaiDescription,\n\t\tGermanDescription,\n\t\tJapaneseDescription,\n\t\tTurkishDescription,\n\t\tStartDate,\n\t\tEndDate,\n\t\tStatus\n\t))~> ColumnSelection"
					},
					{
						"name": "SetAttributes",
						"script": "SurrogateKey1 derive(surrogatekey = concat('abcd', toString(1)),\n\t\tStatus = 'Y',\n\t\tStartDate = currentDate(),\n\t\tEndDate = 1200,\n\t\tNullDesc = toString('  '),\n\t\tmybit = 0) ~> SetAttributes"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQLProducts')]",
				"[concat(variables('factoryId'), '/datasets/DimProd')]",
				"[concat(variables('factoryId'), '/datasets/ADW_DimProduct')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SchemaDrift')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"folder": {
					"name": "Demos"
				},
				"sources": [
					{
						"dataset": {
							"referenceName": "salesdrift",
							"type": "DatasetReference"
						},
						"name": "SalesSource1",
						"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> SalesSource1",
						"typeProperties": {}
					}
				],
				"sinks": [
					{
						"dataset": {
							"referenceName": "driftout",
							"type": "DatasetReference"
						},
						"name": "sink1",
						"script": "CleanTotal sink(saveMode:'overwrite') ~> sink1"
					}
				],
				"transformations": [
					{
						"name": "AddTax",
						"script": "SalesSource1 derive(each(match(name == 'COGS' || name == 'Cost'), $$+'_with_tax' = round(toDouble(trim($$,'$')) * 1.09,2))) ~> AddTax"
					},
					{
						"name": "CleanTotal",
						"script": "AddTax derive(each(match(locate('with_tax',name) > 0), $$ = left('$'+toString($$)+'00',locate('.', $$)+3))) ~> CleanTotal"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/salesdrift')]",
				"[concat(variables('factoryId'), '/datasets/driftout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"description": "Sample demo data flow to transform taxi data showing usage of join and aggregate transformation.",
				"sources": [
					{
						"dataset": {
							"referenceName": "taxi_trip_data_input",
							"type": "DatasetReference"
						},
						"name": "TripData",
						"script": "source(output(\n\t\tmedallion as string,\n\t\thack_license as string,\n\t\tvendor_id as string,\n\t\trate_code as string,\n\t\tstore_and_fwd_flag as string,\n\t\tpickup_datetime as string,\n\t\tdropoff_datetime as string,\n\t\tpassenger_count as short,\n\t\ttrip_time_in_secs as long,\n\t\ttrip_distance as double,\n\t\tpickup_longitude as double,\n\t\tpickup_latitude as double,\n\t\tdropoff_longitude as double,\n\t\tdropoff_latitude as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> TripData",
						"typeProperties": {}
					},
					{
						"dataset": {
							"referenceName": "taxi_trip_fare_input",
							"type": "DatasetReference"
						},
						"name": "TripFare",
						"script": "source(output(\n\t\tmedallion as string,\n\t\t{ hack_license} as string,\n\t\t{ vendor_id} as string,\n\t\t{ pickup_datetime} as string,\n\t\t{ payment_type} as string,\n\t\t{ fare_amount} as double,\n\t\t{ surcharge} as double,\n\t\t{ mta_tax} as double,\n\t\t{ tip_amount} as double,\n\t\t{ tolls_amount} as double,\n\t\t{ total_amount} as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> TripFare",
						"typeProperties": {}
					}
				],
				"sinks": [
					{
						"dataset": {
							"referenceName": "TaxiDemoVendorStatsSink",
							"type": "DatasetReference"
						},
						"name": "VendorStatsSink",
						"script": "AggregateVendorStats sink(saveMode:'overwrite') ~> VendorStatsSink"
					},
					{
						"dataset": {
							"referenceName": "TaxiDemoDayStatsSink",
							"type": "DatasetReference"
						},
						"name": "DayStatsSink",
						"script": "AggregateDayStats sink(saveMode:'overwrite') ~> DayStatsSink"
					},
					{
						"dataset": {
							"referenceName": "TaxiDemoTotalByPaymentType",
							"type": "DatasetReference"
						},
						"name": "TotalPaymentByPaymentType",
						"script": "AggregateByPaymentType sink(saveMode:'overwrite') ~> TotalPaymentByPaymentType"
					}
				],
				"transformations": [
					{
						"name": "JoinMatchedData",
						"script": "TripData, TripFare join(hack_license == { hack_license}\n\t&& TripData@medallion == TripFare@medallion\n\t&& vendor_id == { vendor_id}\n\t&& pickup_datetime == { pickup_datetime},\n\tjoinType:'inner',\n\tbroadcast: 'none')~> JoinMatchedData"
					},
					{
						"name": "AggregateVendorStats",
						"script": "JoinMatchedData aggregate(groupBy(vendor_id),\n\tpassenger_count = round(sum(passenger_count), 2),\n\t\ttrip_time_in_secs = round(sum(trip_time_in_secs)/60, 2),\n\t\ttrip_distance = round(sum(trip_distance), 2),\n\t\tTotalTripFare = round(sum({ total_amount}), 2)) ~> AggregateVendorStats"
					},
					{
						"name": "AggregateDayStats",
						"script": "JoinMatchedData aggregate(groupBy(DayOfTheWeek = dayOfWeek(toDate(pickup_datetime,'yyyy-mm-dd hh:mm:ss'))),\n\ttrip_distance = round(avg(trip_distance), 2),\n\t\tpassenger_count = round(avg(passenger_count), 2),\n\t\ttrip_time_in_secs = round(avg(trip_time_in_secs)/60, 2),\n\t\taverage_fare = round(avg({ total_amount}), 2)) ~> AggregateDayStats"
					},
					{
						"name": "AggregateByPaymentType",
						"script": "TripFare aggregate(groupBy(PaymentType = { payment_type}),\n\teach(match(type=='double'), concat($$, '_total') = round(sum ($$)))) ~> AggregateByPaymentType"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/taxi_trip_data_input')]",
				"[concat(variables('factoryId'), '/datasets/taxi_trip_fare_input')]",
				"[concat(variables('factoryId'), '/datasets/TaxiDemoVendorStatsSink')]",
				"[concat(variables('factoryId'), '/datasets/TaxiDemoDayStatsSink')]",
				"[concat(variables('factoryId'), '/datasets/TaxiDemoTotalByPaymentType')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Windows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"folder": {
					"name": "Demos"
				},
				"sources": [
					{
						"dataset": {
							"referenceName": "Product_Blob",
							"type": "DatasetReference"
						},
						"name": "source1",
						"script": "source(output(\n\t\tProductID as string,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tColor as string,\n\t\tStandardCost as decimal(10,0),\n\t\tListPrice as decimal(10,0),\n\t\tSize as string,\n\t\tWeight as string,\n\t\tProductCategoryID as string,\n\t\tProductModelID as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> source1",
						"typeProperties": {}
					}
				],
				"sinks": [],
				"transformations": [
					{
						"name": "Window1",
						"script": "source1 window(over(Color),\n\tdesc(StandardCost, true),\n\trownum = rowNumber()) ~> Window1"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Product_Blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cleanAddresses')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"sources": [
					{
						"dataset": {
							"referenceName": "Addresses_Blob",
							"type": "DatasetReference"
						},
						"name": "AddressSource",
						"script": "source(output(\n\t\tAddressID as string,\n\t\tAddress1 as string,\n\t\tAddress2 as string,\n\t\tCity as string,\n\t\tProp_4 as string,\n\t\tProp_5 as string,\n\t\tProp_6 as string,\n\t\tProp_7 as string,\n\t\tProp_8 as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> AddressSource",
						"typeProperties": {}
					}
				],
				"sinks": [
					{
						"dataset": {
							"referenceName": "others",
							"type": "DatasetReference"
						},
						"name": "sink1",
						"script": "CleanAddress sink(saveMode:'overwrite') ~> sink1"
					}
				],
				"transformations": [
					{
						"name": "CleanAddress",
						"script": "AddressSource derive(each(match(type == 'string'), $$ + '_clean' = trim(trim($$, '.'), '  '))) ~> CleanAddress"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Addresses_Blob')]",
				"[concat(variables('factoryId'), '/datasets/others')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"sources": [
					{
						"dataset": {
							"referenceName": "jsonblob",
							"type": "DatasetReference"
						},
						"name": "source1",
						"script": "source(output(\n\t\tid as string,\n\t\tcity as string,\n\t\tloc as string,\n\t\tpop as long,\n\t\tstate as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> source1",
						"typeProperties": {}
					}
				],
				"sinks": [],
				"transformations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/jsonblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_params1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"folder": {
					"name": "Params"
				},
				"sources": [
					{
						"dataset": {
							"referenceName": "Product_Blob",
							"type": "DatasetReference"
						},
						"name": "prodSource",
						"script": "source(output(\n\t\tProductID as string,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tColor as string,\n\t\tStandardCost as decimal(10,0),\n\t\tListPrice as string,\n\t\tSize as string,\n\t\tWeight as string,\n\t\tProductCategoryID as string,\n\t\tProductModelID as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> prodSource",
						"typeProperties": {}
					},
					{
						"dataset": {
							"referenceName": "blob_params",
							"type": "DatasetReference"
						},
						"name": "paramsFile",
						"script": "source(output(\n\t\tParamColor as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> paramsFile",
						"typeProperties": {}
					}
				],
				"sinks": [],
				"transformations": [
					{
						"name": "getParams",
						"script": "prodSource, paramsFile lookup(Color == ParamColor,\n\tbroadcast: 'none')~> getParams"
					},
					{
						"name": "FilterRows",
						"script": "Select1 filter(Color == ParamColor) ~> FilterRows"
					},
					{
						"name": "AggregateStandardCost",
						"script": "FilterRows aggregate(groupBy(Color),\n\tAverageStandardCostByColor = '$'+toString(round(avg(StandardCost),2))) ~> AggregateStandardCost"
					},
					{
						"name": "Select1",
						"script": "getParams select(mapColumn(\n\t\tProductID,\n\t\tName,\n\t\tProductNumber,\n\t\tColor,\n\t\tStandardCost,\n\t\tListPrice,\n\t\tSize,\n\t\tWeight,\n\t\tProductCategoryID,\n\t\tProductModelID,\n\t\tParamColor\n\t))~> Select1"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Product_Blob')]",
				"[concat(variables('factoryId'), '/datasets/blob_params')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pivotflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"sources": [
					{
						"dataset": {
							"referenceName": "Product_Blob",
							"type": "DatasetReference"
						},
						"name": "ProductSource",
						"script": "source(output(\n\t\tProductID as string,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tColor as string,\n\t\tStandardCost as decimal(10,0),\n\t\tListPrice as string,\n\t\tSize as string,\n\t\tWeight as string,\n\t\tProductCategoryID as string,\n\t\tProductModelID as string,\n\t\tSellStartDate as string,\n\t\tSellEndDate as string,\n\t\tDiscontinuedDate as string,\n\t\tThumbNailPhoto as string,\n\t\tThumbnailPhotoFileName as string,\n\t\trowguid as string,\n\t\tModifiedDate as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> ProductSource",
						"typeProperties": {}
					}
				],
				"sinks": [],
				"transformations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Product_Blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pivotflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"sources": [
					{
						"dataset": {
							"referenceName": "Product_Blob",
							"type": "DatasetReference"
						},
						"name": "ProductSource",
						"script": "source(output(\n\t\tProductID as string,\n\t\tName as string,\n\t\tProductNumber as string,\n\t\tColor as string,\n\t\tStandardCost as decimal(10,0),\n\t\tListPrice as string,\n\t\tSize as string,\n\t\tWeight as string,\n\t\tProductCategoryID as string,\n\t\tProductModelID as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> ProductSource",
						"typeProperties": {}
					}
				],
				"sinks": [],
				"transformations": [
					{
						"name": "PivotColorStandardCost",
						"script": "ProductSource pivot(groupBy(Name,\n\t\tProductID),\n\tpivotBy(Color),\n\tCostSum = sum(StandardCost),\n\tcolumnNaming: '$N$V',\n\tlateral: true) ~> PivotColorStandardCost"
					},
					{
						"name": "ProductSourceBranch",
						"script": "ProductSource select(mapColumn(\n\t\tProductID2 = ProductID,\n\t\tName,\n\t\tProductNumber,\n\t\tColor,\n\t\tStandardCost,\n\t\tListPrice,\n\t\tSize,\n\t\tWeight,\n\t\tProductCategoryID,\n\t\tProductModelID\n\t))~> ProductSourceBranch"
					},
					{
						"name": "Join1",
						"script": "PivotColorStandardCost, ProductSourceBranch join(ProductID == ProductID2,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join1"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Product_Blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/regexflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"sources": [
					{
						"dataset": {
							"referenceName": "Addresses_Blob",
							"type": "DatasetReference"
						},
						"name": "IncomingAddresses",
						"script": "source(output(\n\t\tAddressID as string,\n\t\tAddress1 as string,\n\t\tAddress2 as string,\n\t\tCity as string,\n\t\tProp_4 as string,\n\t\tProp_5 as string,\n\t\tProp_6 as string,\n\t\tProp_7 as string,\n\t\tProp_8 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> IncomingAddresses",
						"typeProperties": {}
					}
				],
				"sinks": [
					{
						"dataset": {
							"referenceName": "A_G",
							"type": "DatasetReference"
						},
						"name": "sink1",
						"script": "ConditionalSplit1@AThruG sink(saveMode:'overwrite') ~> sink1"
					},
					{
						"dataset": {
							"referenceName": "H_P",
							"type": "DatasetReference"
						},
						"name": "sink2",
						"script": "ConditionalSplit1@HThruP sink(saveMode:'overwrite') ~> sink2"
					},
					{
						"dataset": {
							"referenceName": "Q_Z",
							"type": "DatasetReference"
						},
						"name": "sink3",
						"script": "ConditionalSplit1@QThruZ sink(saveMode:'overwrite') ~> sink3"
					},
					{
						"dataset": {
							"referenceName": "others",
							"type": "DatasetReference"
						},
						"name": "sink4",
						"script": "ConditionalSplit1@other sink(saveMode:'overwrite') ~> sink4"
					}
				],
				"transformations": [
					{
						"name": "CleanAddress",
						"script": "IncomingAddresses derive(clean_address = regexReplace(Address1,`[ ]{2}|\\.`,' '),\n\t\thouse_num = regex_extract(Address1, `^(\\d+)`, 1)) ~> CleanAddress"
					},
					{
						"name": "ConditionalSplit1",
						"script": "CleanAddress split(rlike(City,'^[A-G]'),\n\trlike(City,'^[H-P]'),\n\trlike(City,'^[Q-Z]'),\n\tdisjoint: false) ~> ConditionalSplit1@(AThruG, HThruP, QThruZ, other)"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Addresses_Blob')]",
				"[concat(variables('factoryId'), '/datasets/A_G')]",
				"[concat(variables('factoryId'), '/datasets/H_P')]",
				"[concat(variables('factoryId'), '/datasets/Q_Z')]",
				"[concat(variables('factoryId'), '/datasets/others')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/soccerETL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"folder": {
					"name": "Soccer"
				},
				"sources": [
					{
						"dataset": {
							"referenceName": "soccer_events",
							"type": "DatasetReference"
						},
						"name": "SpecifySchemaExtract",
						"script": "source(output(\n\t\tid_odsp as string,\n\t\tid_event as string,\n\t\tsort_order as integer,\n\t\ttime as integer,\n\t\ttext as string,\n\t\tevent_type as string,\n\t\tevent_type2 as string,\n\t\tside as string,\n\t\tevent_team as string,\n\t\topponent as string,\n\t\tplayer as string,\n\t\tplayer2 as string,\n\t\tplayer_in as string,\n\t\tplayer_out as string,\n\t\tshot_place as string,\n\t\tshot_outcome as string,\n\t\tis_goal as string,\n\t\tlocation as string,\n\t\tbodypart as string,\n\t\tassist_method as string,\n\t\tsituation as string,\n\t\tfast_break as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> SpecifySchemaExtract",
						"typeProperties": {}
					},
					{
						"dataset": {
							"referenceName": "locationMap",
							"type": "DatasetReference"
						},
						"name": "locationMap",
						"script": "source(output(\n\t\tType as string,\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> locationMap",
						"typeProperties": {}
					}
				],
				"sinks": [
					{
						"dataset": {
							"referenceName": "driftout",
							"type": "DatasetReference"
						},
						"name": "sinkToDW",
						"script": "TimeBins sink(saveMode:'overwrite') ~> sinkToDW"
					}
				],
				"transformations": [
					{
						"name": "DictionaryMapping1",
						"script": "SpecifySchemaExtract derive(eventTypeMap = case(\r\n    event_type == '0','Announcement',\r\n    event_type == '1','Attempt',\r\n    event_type == '2','Corner',\r\n    event_type == '3','Foul',\r\n    event_type == '4','Yellow Card',\r\n    event_type == '5','Second yellow card',\r\n    event_type == '6','Red card',\r\n    event_type == '7','Substitution',\r\n    event_type == '8','Free kick won',\r\n    event_type == '9','Offside',\r\n    event_type == '10','Hand ball',\r\n    event_type == '11','Penalty conceded',\r\n    event_type == '99', 'NA'\r\n),\n\t\ttime = toInteger(time)) ~> DictionaryMapping1"
					},
					{
						"name": "JoinStringDataViaLookup",
						"script": "DictionaryMapping1, locationMap lookup(location == Type,\n\tbroadcast: 'none')~> JoinStringDataViaLookup"
					},
					{
						"name": "TimeBins",
						"script": "ColumnSelectionNaming window(over(time),\n\tasc(event_type2, true),\n\tTimeBins = nTile(),\n\tpartitionBy('hash', 1)) ~> TimeBins"
					},
					{
						"name": "ColumnSelectionNaming",
						"script": "JoinStringDataViaLookup select(mapColumn(\n\t\tid_odsp,\n\t\tid_event,\n\t\tsort_order,\n\t\ttime,\n\t\ttext,\n\t\tevent_type2,\n\t\tside,\n\t\tevent_team,\n\t\topponent,\n\t\tplayer,\n\t\tplayer2,\n\t\tplayer_in,\n\t\tplayer_out,\n\t\tshot_place,\n\t\tshot_outcome,\n\t\tis_goal,\n\t\tlocation,\n\t\tbodypart,\n\t\tassist_method,\n\t\tsituation,\n\t\tfast_break,\n\t\teventTypeName = eventTypeMap,\n\t\tLocationName = Name\n\t))~> ColumnSelectionNaming"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/soccer_events')]",
				"[concat(variables('factoryId'), '/datasets/locationMap')]",
				"[concat(variables('factoryId'), '/datasets/driftout')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfparameters')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-07-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MyAzureBlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "key",
						"type": "String"
					},
					{
						"name": "value",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": "=",
						"rowDelimiter": "",
						"quoteChar": "\"",
						"nullValue": "\\N",
						"encodingName": null,
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('dfparameters_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('dfparameters_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MyAzureBlobLinkedService')]"
			]
		}
	]
}